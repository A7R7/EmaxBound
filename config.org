:DOC-CONFIG:
#+PROPERTY: header-args:elisp :tangle init.el :language elisp
#+PROPERTY: header-args:emacs-lisp :tangle init.el :language elisp
#+PROPERTY: header-args:conf :tangle .borgconfig :language conf
#+PROPERTY: header-args:mkdirp yes :comments no
#+STARTUP: fold
#+OPTIONS: toc:2
#+auto_tangle: t
:END:

#+TITLE: EmaxBound Configuration
#+AUTHOR: A7R7

#+HTML:<img alt="EmaxBound" src="assets/EmacsBound.svg" width="100%">
  -----
#+HTML:<a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://img.shields.io/badge/emacs-29.1-8A2BF2?logo=gnuemacs&logoColor=white"/></a>
#+HTML:<a href="https://github.com/emacscollective/borg"><img alt="Package Manager" src="https://img.shields.io/badge/package_manager-borg-green"/></a>
#+HTML:<a href="https://en.wikipedia.org/wiki/Linux"><img alt="Linux" src="https://img.shields.io/badge/linux-FCC624?logo=linux&logoColor=black"/></a>

* Screenshots
#+HTML:<img alt="Dashboard" src="assets/dashboard.png" width="80">
#+HTML:<img alt="Org Mode" src="assets/org_mode.png" width="80%">
* Introduction
** How to deploy this config
This config file is still in its early stages of development, *Everything is unstable!*
To play around with my config files, clone this repo anywhere you like on your system.
#+begin_src bash
git clone --depth=1 https://github.com/A7R7/EmaxBound.git
#+end_src

Then, simply execute these make rules inside the repo directory.
#+begin_src bash
make bootstrap-borg  # bootstrap borg itself
make bootstrap       # bootstrap collective or new drones
#+end_src

Last, run ~emacs --init-directory=<path-of-the-repo>~ (replace the path).

** How I built this config from seed

The whole config structure is built upon [[https://github.com/emacscollective/emacs.g][emacscollective/emacs.g]].
It is a starter-kit using borg as the package manager, which utilizes git submodules to maintain all its packages.
Check [[https://emacsmirror.net/manual/borg/Bootstrapping-using-a-seed.html][Bootstrapping-using-a-seed]] from its [[https://emacsmirror.net/manual/borg/][manual]] to see how to build the config structure.

- Firstly, I generated the structure from the seed.
- Then, I copied and pasted all the original code from init.el and early-init.el to this org file.
- Last, most further config does not go beyond the following 3 steps:
  + Run [[elisp: borg-assimilate][M-x borg-assimilate]] and input the name of the package to install this package.
  + Write config codes into this org file, then run [[elisp:org-babel-tangle][M-x org-babel-tangle]] so that emacs writes the codes into the corresponding file. (Tangle is done automatically on save)
  + For some packages, specify its load path or build method in ~.borgconfig~ for them to be load or built as expected. This is auto tangled as well.

** References

- [[https://github.com/lccambiaghi/vanilla-emacs][Luca's vanilla-emacs]] (2023) detailed org config file.
- [[https://gitlab.com/dwt1/configuring-emacs][DistroTube's Configuring Emacs]] (2023) easy to follow.
- [[https://github.com/seagle0128/.emacs.d][seagle0128's Centaur Emacs]] (2023) be morden.
- [[https://github.com/daviwil/emacs-from-scratch][Daviwell's Emacs from scratch]] (2021) intuitive.
- [[https://github.com/lijigang/100-questions-about-orgmode][lijigang's 100-questions-about-orgmode]] (2023) for org mode of course.
- [[https://github.com/doomemacs/doomemacs][Doom Emacs]] (2023) Some best practices.
- [[https://github.com/dakra/dmacs][Dakra's Dmacs]] (2023) Another Emacs Literate configuration with borg

*NOTE*: the year number after link equals to
- =min (last time the config get's updated, last time I refered to the config)=

* Earliest birds

*NOTE*: codes under this heading are tangled to early-init.el

Disable byte-compile for early-init.el, according to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][emacs manual]].
#+begin_src elisp :tangle early-init.el
;;; early-init.el --- earliest birds  -*- lexical-binding: t; no-byte-compile: t -*-
#+end_src

Disable tool-bar, menu-bar and scroll-bar before they're loaded.
#+begin_src elisp :tangle early-init.el
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Borg seed generated configs.
#+begin_src elisp :tangle early-init.el
(setq load-prefer-newer t)

(let ((dir (file-name-directory (or load-file-name buffer-file-name))))
  (add-to-list 'load-path (expand-file-name "lib/compat" dir))
  (add-to-list 'load-path (expand-file-name "lib/packed" dir))
  (add-to-list 'load-path (expand-file-name "lib/auto-compile" dir)))
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)

(setq package-enable-at-startup nil)

(with-eval-after-load 'package
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t))
;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; End:
;;; early-init.el ends here
#+end_src

* Early birds

*NOTE*: Starting from here, elisp codes are tangled to init.el !

Disable byte compile for init.el, according to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][emacs manual]].
#+begin_src elisp
  ;;; init.el --- user-init-file
#+end_src

Calculating time used loading emacs excutable, as well as setting some variables.
#+begin_src elisp
  ;;; -*- lexical-binding: t; no-byte-compile: t -*-
  (progn ;     startup
    (defvar before-user-init-time (current-time)
      "Value of `current-time' when Emacs begins loading `user-init-file'.")
    (message "Loading Emacs...done (%fs)"
  	     (float-time (time-subtract before-user-init-time
  					before-init-time)))
    (setq user-init-file (or load-file-name buffer-file-name))
    (setq user-emacs-directory (file-name-directory user-init-file))
    (message "Loading %s..." user-init-file)

    (setq inhibit-startup-buffer-menu t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message "locutus")
    (setq initial-buffer-choice t)
    (setq initial-scratch-message "")
    ;; smooth window on startup
    (setq frame-inhibit-implied-resize t)
    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold most-positive-fixnum)
    ;; copied from lazycat
    (setq gc-cons-percentage 0.6)
    ;; Prevent flashing of unstyled modeline at startup
    (setq-default mode-line-format nil)
    (setq confirm-kill-emacs 'y-or-n-p)
  )
#+end_src

* Core units

 * [[https://github.com/emacscollective/borg][Borg]] assimilate Emacs packages as Git submodules. Core of the core units.
   =borg-initialize= should be called in init.el for borg to initialize assimilated drones using =borg-activate=.
    To skip the activation of the drone named DRONE, temporarily disable it by setting the value of the Git variable submodule.DRONE.disabled to true in ~/.config/emacs/.gitmodules.

#+begin_src elisp
(eval-and-compile ; `borg'
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (borg-initialize)
)
#+end_src

 * Use-package is built-in since emacs-29! Uncomment the comment if running below29.
#+begin_src elisp
(setq use-package-verbose t)
  ;(eval-and-compile ; `use-package'
  ;  (require  'use-package)
  ;  (setq use-package-verbose t))
#+end_src

 * [[https://github.com/magnars/dash.el][Dash]] is a modern list library for Emacs See its overview at [[https://github.com/magnars/dash.el#functions][dash.el - functions]].
    =Dash-Fontify mode= is a buffer-local minor mode intended for Emacs Lisp buffers.  Enabling it causes the special variables bound in anaphoric Dash macros to be fontified.  These anaphoras include ‘it’, ‘it-index’, ‘acc’, and ‘other’.  In older Emacs versions which do not dynamically detect macros, Dash-Fontify mode additionally fontifies Dash macro calls.

#+begin_src elisp
(use-package dash
  :config (global-dash-fontify-mode))
#+end_src

Dash needs some tweaks to be built
#+begin_src conf
[submodule "dash"]
	no-byte-compile = dash-functional.el
	no-makeinfo = dash-template.texi
#+end_src

 * [[https://www.gnu.org/software/emacs][EIEIO]] is a series of Lisp routines which implements a subset of CLOS, the Common Lisp Object System. In addition, EIEIO also adds a few new features which help it integrate more strongly with the Emacs running environment.
#+begin_src elisp
(use-package eieio)
#+end_src

 * [[https://github.com/emacscollective/auto-compile][Auto-Compile]] automatically compile Emacs Lisp libraries
   Suppress comp warnings.
#+begin_src elisp
  (use-package auto-compile
    :config
    (setq auto-compile-display-buffer             nil
	  auto-compile-mode-line-counter            t
	  auto-compile-source-recreate-deletes-dest t
	  auto-compile-toggle-deletes-nonlib-dest   t
	  auto-compile-update-autoloads             t
	  warning-suppress-log-types        '((comp)))
  )
#+end_src

 * [[https://github.com/emacscollective/epkg][Epkg]] allows you browse the Emacsmirror package database. We're using emacs >= 29 which has builtin support for sqlite, so we let epkg-database-connector to use builtin sqlite.
#+begin_src elisp
(use-package epkg
  :defer t
  :init
  (setq epkg-repository
	(expand-file-name "var/epkgs/" user-emacs-directory))
  (setq epkg-database-connector 'sqlite-builtin ))
#+end_src

 * [[https://www.emacswiki.org/emacs/CustomizingAndSaving#Customize][Customize system]] of emacs. Set the file path used for storing customization information.
#+begin_src elisp
  (use-package custom
    :no-require t
    :config
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (setf custom-safe-themes t) ;Treat all themes as safe
    (when (file-exists-p custom-file)
      (load custom-file)))
#+end_src

 * Server allows Emacs to operate as a server for other processes. Built in.
#+begin_src elisp
(use-package server
  :commands (server-running-p)
  :config (or (server-running-p) (server-mode)))
#+end_src

 * [[https://git.tecosaur.net/tec/org-mode][Org-9.7]] (preview) did some overhaul to org-latex-preview in org mode. Load External org before the built in org is loaded.
#+begin_src elisp
  (use-package org)
#+end_src

All the .el files are placed in the ./lisp/ folder.
According to the installation manual of org, we need to make autoloads before compile.
#+begin_src conf
  [submodule "org"]
	  load-path = lisp
	  build-step = make autoloads
	  build-step = borg-update-autoloads
	  build-step = borg-compile
	  build-step = borg-maketexi
	  build-step = borg-makeinfo
#+end_src

 * End of early birds, calculate load time.
#+begin_src elisp
(progn ;     startup
  (message "Loading early birds...done (%fs)"
	   (float-time (time-subtract (current-time) before-user-init-time))))
#+end_src

* Libraries
** S
[[https://github.com/magnars/s.el][S]] is the long lost Emacs string manipulation library.

** F
[[https://github.com/rejeep/f.el][F]] is a modern API for working with files and directories in Emacs.

** Annalist
[[https://github.com/noctuid/annalist.el][annalist.el]] is a library that can be used to record information and later print that information using org-mode headings and tables. It allows defining different types of things that can be recorded (e.g. keybindings, settings, hooks, and advice) and supports custom filtering, sorting, and formatting. annalist is primarily intended for use in other packages like general and evil-collection, but it can also be used directly in a user’s configuration.

** Shrink path
[[https://github.com/zbelial/shrink-path.el][Shrink path]] is a small utility functions that allow for fish-style trunctated directories in eshell and for example modeline.
#+begin_src elisp
(use-package shrink-path :demand t)
#+end_src

** Emacsql
tweaks to buiild emacsql
#+begin_src conf
  [submodule "emacsql"]
	no-byte-compile = emacsql-pg.el
#+end_src

** Sqlite3
#+begin_src conf
[submodule "sqlite3"]
	build-step = make
#+end_src

* Basic Kbd

We setup keybinding framworks and basic keybindings at this place. Note that not all keybindings are set here. Some package specific keybinding configs are set under where the package is configured.

** Evil
I guess evil surround and evil nerd commentor should be better to put under Coding.
*** Evil mode

[[https://github.com/emacs-evil/evil][Evil mode]] that turns you into an evil.

#+begin_src elisp
  (use-package evil
    :init
      (setq evil-want-integration t) ;; t by default
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (setq evil-want-C-u-scroll t)

    :config
      (evil-mode 1)
	;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)
      (evil-set-undo-system 'undo-redo)
      (evil-define-key 'normal 'foo-mode "e" 'baz)
  )
#+end_src
#+begin_src conf
  [submodule "evil"]
    info-path = doc/build/texinfo
#+end_src
*** Evil collection

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] automatically configures various Emacs modes with Vi-like keybindings.

#+begin_src elisp
  (use-package evil-collection
    ;; :demand t
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    ;(setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  (use-package evil-tutor
    :demand t)

  (use-package emacs
    :config (setq ring-bell-function #'ignore)
  )
#+end_src

*** Evil Surround
#+begin_src elisp
  (use-package evil-surround
  :after evil
  :config
    (global-evil-surround-mode 1))
#+end_src
*** Evil Nerd commenter
[[https://github.com/redguardtoo/evil-nerd-commenter][Evi Nerd Commenter]] helps you comment code efficiently!
#+begin_src elisp
  (use-package evil-nerd-commenter
  :after evil
  :config
  )
#+end_src
** Meow
#+begin_src elisp
  (use-package meow
  :defer t
  :custom-face
    (meow-cheatsheet-command ((t (:height 180 :inherit fixed-pitch))))
  :config
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j") '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument) '("2" . meow-digit-argument) 
       '("3" . meow-digit-argument) '("4" . meow-digit-argument) 
       '("5" . meow-digit-argument) '("6" . meow-digit-argument)
       '("7" . meow-digit-argument) '("8" . meow-digit-argument) 
       '("9" . meow-digit-argument) '("0" . meow-digit-argument) 
       '("/" . meow-keypad-describe-key) '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("1" . meow-expand-1) '("2" . meow-expand-2) 
       '("3" . meow-expand-3) '("4" . meow-expand-4) 
       '("5" . meow-expand-5) '("6" . meow-expand-6)
       '("7" . meow-expand-7) '("8" . meow-expand-8) 
       '("9" . meow-expand-9) '("0" . meow-expand-0)
       '("-" . negative-argument) '(";" . meow-reverse)
       '("," . meow-inner-of-thing) '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing) '("]" . meow-end-of-thing)
       '("a" . meow-append) '("A" . meow-open-below)
       '("b" . meow-back-word) '("B" . meow-back-symbol)
       '("c" . meow-change) '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word) '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection) '("G" . meow-grab)
       '("h" . meow-left) '("H" . meow-left-expand)
       '("i" . meow-insert) '("I" . meow-open-above)
       '("j" . meow-next) '("J" . meow-next-expand)
       '("k" . meow-prev) '("K" . meow-prev-expand)
       '("l" . meow-right) '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block) '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit) '("Q" . meow-goto-line)
       '("r" . meow-replace) '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo) '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word) '("W" . meow-mark-symbol)
       '("x" . meow-line) '("X" . meow-goto-line)
       '("y" . meow-save) '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat) '("<escape>" . ignore)))
	(meow-setup)
  )
#+end_src

** General

[[https://github.com/noctuid/general.el][General]] provides a more convenient method for binding keys in emacs
(for both evil and non-evil users).

*Note*: byte compile init.el will lead to function created by general-create-definer failed to work. See [[Header]].
#+begin_src elisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    ;; (general-evil-setup)
    ;; set up 'SPC' as the global leader key

    (general-evil-setup t)
    (general-create-definer config/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (config/leader
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key"))

    ;; buffers
    (config/leader :infix "b"
      ""        '(nil                            :wk "  Buffer ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
      "b"       '(switch-to-buffer               :wk " Switch ")
      "d"       '(kill-this-buffer               :wk "󰅖 Delete ")
      "r"       '(revert-buffer                  :wk "󰑓 Reload ")
      "["       '(previous-buffer                :wk " Prev ")
      "]"       '(next-buffer                    :wk " Next ")
      )
    ;; centaur tabs
    (config/leader
      "{"       '(centaur-tabs-backward-group    :wk " Prev Group")
      "}"       '(centaur-tabs-forward-group     :wk " Next Group")
      "["       '(centaur-tabs-backward          :wk " Prev Buffer ")
      "]"       '(centaur-tabs-forward           :wk " Next Buffer ")
      )
    ;; builtin-tabs
    (config/leader :infix "TAB"
      ""        '(nil                            :wk " 󰓩 Tab ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
      "TAB"     '(tab-new                        :wk "󰝜 Tab New ")
      "d"       '(tab-close                      :wk "󰭌 Tab Del ")
      "["       '(tab-previous                   :wk " Prev ")
      "]"       '(tab-next                       :wk " Next ")
      )
    ;; windows
    (config/leader :infix "w"
      ""        '(nil                            :wk " 󰓩 Tab ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
      "d"       '(delete-window                  :wk "󰅖 Delete  ")
      "v"       '(split-window-vertically        :wk "󰤻 Split   ")
      "s"       '(split-window-horizontally      :wk "󰤼 Split   ")
      "\\"      '(split-window-vertically        :wk "󰤻 Split   ")
      "|"       '(split-window-horizontally      :wk "󰤼 Split   ")
      "h"       '(evil-window-left               :wk " Focus H ")
      "j"       '(evil-window-down               :wk " Focus J ")
      "k"       '(evil-window-up                 :wk " Focus K ")
      "l"       '(evil-window-right              :wk " Focus L ")
      )
    ;; Borg
    (config/leader :infix "B"
      ""        '(nil                            :wk " 󰏗 Borg      ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
      "a"       '(borg-assimilate                :wk "󱧕 Assimilate ")
      "A"       '(borg-activate                  :wk " Activate   ")
      "b"       '(borg-build                     :wk "󱇝 Build      ")
      "c"       '(borg-clone                     :wk " Clone      ")
      "r"       '(borg-remove                    :wk "󱧖 Remove     ")
      )
    ;; toggle
    (config/leader :infix "t"
      ""        '(nil                            :wk " 󰭩 Toggle    ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
      )
    ;; quit
    (config/leader :infix "q"
      ""        '(nil                            :wk " 󰗼 Quit      ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
      "q"       '(save-buffers-kill-terminal     :wk "󰗼 Quit Emacs ")
      )
    ;; Git
    (config/leader :infix "g"
      ""        '(nil                            :wk " 󰊢 Git       ")
      "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
      "g"       '(magit                          :wk " Magit      ")
      )
    ;; dired
    (config/leader
      "e"       '(dirvish-side                   :wk "󰙅 Dirvish-side ")
      ;;"E"       '(dirvish                        :wk " Dirvish      ")
      ;;"qe"      '(save-buffers-kill-emacs         :wk "Quit Emacs ")
      ;;"e"       '(treemacs                        :wk "󰙅 Treemacs ")
      )
    (config/leader
      "/"       '(evilnc-comment-or-uncomment-lines :wk "󱀢 Comment ")
      )
    )
#+end_src

** Which-key

[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+begin_src elisp
  (use-package which-key
  :after general
  :init
    (setq
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-location 'bottom
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-idle-secondary-delay 0.01
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit t
      ;which-key-separator " → "
      which-key-separator " "
      Which-key-show-early-on-C-h t
      which-key-sort-order 'which-key-prefix-then-key-order
    )
    ;(general-define-key
    ;:keymaps 'which-key-mode-map
    ;  "DEL" '(which-key-undo :wk "undo")
    ;)
    (which-key-mode 1)
  )
#+end_src

[[https://github.com/yanghaoxie/which-key-posframe][Which-key-posframe]] use posframe to show which-key popup.
options for =which-key-posframe-poshandler=:
~posframe-poshandler-[frame/window/point]-[top/bottom/]-[center/left-corner/right-corner]~
#+begin_src elisp
  (use-package which-key-posframe
  :config
    (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-center)
    (which-key-posframe-mode)
  )
#+end_src

** Hydra
** Mouse

* Basic UI

We setup UI for basic emacs widgets at this place. Again, not all UI's are set here.
Some package specific UI configs are set under where the package is configured.

** Fonts

Defining the various fonts that Emacs will use.
Note that monospace fonts are not always fixed-pitch [[https://stackoverflow.com/questions/70797173/monospace-font-characters-are-not-fixed-width][Monospace vs fixed-width]].
#+begin_src elisp
  (set-face-attribute 'default nil
    ;:font "JetBrainsMono Nerd Font"
    :font "RobotoMono Nerd Font"
    ;:font "Sarasa Term SC Nerd"
    ;:font "Sarasa Gothic SC"
    :height 180
  )
  (set-face-attribute 'variable-pitch nil
    :font "Sarasa Gothic SC"
    :height 180
  )
  (set-face-attribute 'fixed-pitch nil
    ;:font "Sarasa Fixed SC"
    :font "RobotoMono Nerd Font"
    :height 180
  )
  (set-face-attribute 'fixed-pitch-serif t
    :family "Monospace Serif"
    :height 180
  )
#+end_src

Makes commented text and keywords italics. Working in emacsclient but not emacs.
#+begin_src elisp
  (set-face-attribute 'font-lock-comment-face nil
    :foreground "LightSteelBlue4" :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil :slant 'italic)
#+end_src

links
#+begin_src elisp
  (set-face-attribute 'link nil
    :foreground "#ffcc66" :underline t :bold nil)
#+end_src

*** Zooming In/Out

You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src elisp
 (use-package emacs
   :init
     (global-set-key (kbd "C-=")            'text-scale-increase)
     (global-set-key (kbd "C--")            'text-scale-decrease)
     (global-set-key (kbd "<C-wheel-up>")   'text-scale-increase)
     (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
 )
#+end_src

*** Pitch
There're 2 modes that controls pitch, mixed-pitch-mode and fixed-pitch-mode.
#+begin_src elisp
  (use-package fixed-pitch)
#+end_src

#+begin_src elisp
  (use-package mixed-pitch-mode
  :defer t
  :config
  :hook (Custom-mode . mixed-pitch-mode)
    (setq  mixed-pitch-set-height t)
  )
#+end_src

** Icons
*** All-the-icons

[[https://github.com/domtronn/all-the-icons.el][All-the-icons]] is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src elisp
(use-package all-the-icons
  :if (display-graphic-p))

;(use-package all-the-icons-dired
;  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

*NOTE*: In order for the icons to work it is very important that you install the Resource Fonts included in this package. Run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

*** Nerd-icons
[[https://github.com/rainstormstudio/nerd-icons.el][Nerd-icons]] is a library for easily using Nerd Font icons inside Emacs, an alternative to all-the-icons.
Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install =Symbols Nerd Fonts Mono= for you.
#+begin_src elisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
)
#+end_src

** Theme
[[https://github.com/hlissner/emacs-doom-themes][Doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

** Page
*** Centering

We have 3 modes that can help centering text in a window. But currently we only use olivetti mode.

**** Olivetti

    [[https://github.com/rnkn/olivetti][Olibetti]] is a simple Emacs minor mode for a nice writing environment.
    Set olivetti-style to both margins and fringes for a fancy "page" look.

    Note that for pages with variable-pitch fonts,
    =olivetti-body-width= should be set smaller for it to look good.
#+begin_src elisp
  (use-package olivetti
  :hook (org-mode . olivetti-mode)
    (Custom-mode . olivetti-mode)
    (help-mode . olivetti-mode)
    (dashboard-mode . olivetti-mode)
    (dashboard-mode . variable-pitch-mode)
    (olivetti-mode . visual-line-mode)
  :init
    (setq-default fill-column 74)
  :config
    ;If nil (the default), use the value of fill-column + 2.
    (setq olivetti-body-width nil
	         olivetti-style 'fancy)
    (set-face-attribute 'olivetti-fringe nil :background "#171B24")

    (config/leader
      "tc"  '(olivetti-mode     :wk "󰉠 Center")
    )
  )
#+end_src

**** Visual-fill-column

    [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]

**** Writeroom-mode

*** Spacing

[[https://github.com/trevorpogue/topspace][Topspace]] recenter line 1 with scrollable upper margin/padding
#+begin_src elisp
  (use-package topspace
  :init (global-topspace-mode)
  )
#+end_src

*** Whitespace mode

[[https://www.emacswiki.org/emacs/WhiteSpace][Whitespace mode]] is a built in mode of emacs that visualizes whitespaces, tab symbols, indentations and related stuffs.
#+begin_src elisp
  (config/leader :infix "t"
    "SPC"  '(whitespace-mode  :wk "󰡭 Show Space")
  )
#+end_src
** Transparency

Set background Transparency, according to [[https://www.emacswiki.org/emacs/TransparentEmacs][this page]].
#+begin_src elisp
  (set-frame-parameter nil 'alpha-background 96)
  (add-to-list 'default-frame-alist '(alpha-background . 96))

  (defun config/transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter nil 'alpha-background value))
#+end_src

** Scroll

This piece of code is taken from https://emacs-china.org/t/topic/25114/5
#+begin_src elisp
(pixel-scroll-precision-mode 1)
(setq pixel-scroll-precision-interpolate-page t)
(defun +pixel-scroll-interpolate-down (&optional lines)
  (interactive)
  (if lines
      (pixel-scroll-precision-interpolate (* -1 lines (pixel-line-height)))
    (pixel-scroll-interpolate-down)))

(defun +pixel-scroll-interpolate-up (&optional lines)
  (interactive)
  (if lines
      (pixel-scroll-precision-interpolate (* lines (pixel-line-height))))
  (pixel-scroll-interpolate-up))

(defalias 'scroll-up-command '+pixel-scroll-interpolate-down)
(defalias 'scroll-down-command '+pixel-scroll-interpolate-up)
#+end_src

** Modeline

[[https://github.com/seagle0128/doom-modeline][Doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src elisp
  (use-package doom-modeline
  :init
    (setq
      doom-modeline-height 37
      doom-modeline-enable-word-count t)
    (doom-modeline-mode 1)
  :config
    (set-face-attribute 'doom-modeline t
      :inherit 'variable-pitch
    )
  )
#+end_src

*NOTE1*: [[Nerd-icons]] are necessary. Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install the resource fonts.

*NOTE2:* [[All-the-icons]] hasn't been supported since 4.0.0. If you prefer all-the-icons, please use release 3.4.0, then run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

*** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.
#+begin_src elisp
(use-package diminish)
#+end_src

** Dashboard
Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
#+begin_src elisp
  (use-package dashboard
  :init
    (setq initial-buffer-choice 'dashboard-open
	  dashboard-image-banner-max-width 1000
	  dashboard-set-heading-icons t
	  dashboard-center-content t ;; set to 't' for centered content
	  dashboard-set-file-icons t
	  initial-buffer-choice
	    (lambda () (get-buffer-create "*dashboard*"))
	  dashboard-startup-banner ;; use custom image as banner
	    (concat user-emacs-directory "assets/EmacsBound.xpm")
	  dashboard-items '(
	    (recents . 5)
	    (agenda . 5 )
	    (bookmarks . 3)
	    (projects . 3)
	    (registers . 3)
	  )
    )
  :config
    (dashboard-setup-startup-hook)
  )
#+end_src

** Tabs
#+begin_src elisp
  (use-package centaur-tabs
    :hook
      (emacs-startup . centaur-tabs-mode)
      (dired-mode . centaur-tabs-local-mode)
      (dirvish-directory-view-mode . centaur-tabs-local-mode)
      (dashboard-mode . centaur-tabs-local-mode)
    :init
      (setq centaur-tabs-set-icons t
	    centaur-tabs-set-modified-marker t
	    centaur-tabs-modified-marker "M"
	    centaur-tabs-cycle-scope 'tabs
	    centaur-tabs-set-bar 'over
	    centaur-tabs-enable-ido-completion nil
      )
      (centaur-tabs-mode t)
    :config
      (centaur-tabs-change-fonts "Sarasa Gothic SC" 160)
      ;; (centaur-tabs-headline-match)
      ;; (centaur-tabs-group-by-projectile-project)

  )
#+end_src

** Scrolling
#+begin_src elisp
  (use-package emacs
  :config
    (setq scroll-conservatively 97)
    (setq scroll-preserve-screen-position 1)
    (setq mouse-wheel-progressive-speed nil)
  )
#+end_src

** Minibuffer
*** Mini-frame

[[https://github.com/muffinmad/emacs-mini-frame][Mini-Frame]], similar to posframe, shows minibuffer in child frame on read-from-minibuffer.
#+begin_src elisp
  (use-package mini-frame
  :config
    (setq mini-frame-detach-on-hide nil)
    ;(setq mini-frame-standalone 't)
    ;(setq mini-frame-resize-min-height 10)
    (setq mini-frame-ignore-commands
      (append mini-frame-ignore-commands
       '(evil-window-split evil-window-vsplit evil-ex)))
  )
#+end_src
*** Solaire mode

Darken the background of minibuffer using solaire-mode.
#+begin_src elisp
  ;(add-hook 'minibuffer-setup-hook 'solaire-mode)
#+end_src
*** Center text

Use olivetti to center text in minibuffer!
#+begin_src elisp
  (add-hook 'minibuffer-setup-hook
    (defun config/set-minibuffer-margin ()
      (setq olivetti-body-width 140)
      (olivetti-mode)
    )
  )
#+end_src

** Diff
#+begin_src elisp
  (use-package diff-hl
  :custom-face
    (diff-hl-change ((t (:background "#2c5f72" :foreground "#77a8d9"))))
    (diff-hl-delete ((t (:background "#844953" :foreground "#f27983"))))
    (diff-hl-insert ((t (:background "#5E734A" :foreground "#a6cc70"))))
  :config
    (setq diff-hl-draw-borders nil)
    (global-diff-hl-mode)
    ;(diff-hl-margin-mode) 
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t)
  )
#+end_src

** Posframe
[[https://github.com/tumashu/posframe][Posframe]] can pop up a frame at point, this *posframe* is a child-frame connected to its root window's buffer.

** Holo-layer
[[https://github.com/manateelazycat/holo-layer][Holo-layer]] is developed based on PyQt, aiming to significantly enhance the visual experience of Emacs. 
Disabled because it cannot run perfectly on hyprland.
#+begin_src elisp
  (use-package holo-layer
    :disabled
    :config 
    (holo-layer-enable)
  )
#+end_src
* Facilities
** Long tail
#+begin_src elisp
(use-package diff-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'diff-refine-changed nil :extend t)
    (set-face-attribute 'diff-refine-removed nil :extend t)
    (set-face-attribute 'diff-refine-added   nil :extend t)))
#+end_src

#+begin_src elisp
(use-package dired
  :defer t
  :config (setq dired-listing-switches "-alh"))
#+end_src

#+begin_src elisp
(use-package eldoc
  :when (version< "25" emacs-version)
  :config (global-eldoc-mode))
#+end_src

#+begin_src elisp
(use-package help
  :defer t
  :config (temp-buffer-resize-mode))
#+end_src

#+begin_src elisp
(progn ;    `isearch'
  (setq isearch-allow-scroll t))
#+end_src

#+begin_src elisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
  (defun indent-spaces-mode ()
    (setq indent-tabs-mode nil))
  (add-hook 'lisp-interaction-mode-hook 'indent-spaces-mode))
#+end_src

 * [[https://github.com/magit/magit][Magit]] is a VERY powerful git client.
#+begin_src elisp
(use-package magit
  :defer t
  :commands (magit-add-section-hook)
  :config
  (magit-add-section-hook 'magit-status-sections-hook
			  'magit-insert-modules
			  'magit-insert-stashes
			  'append))
#+end_src
    - tweaks to build magit
#+begin_src conf
[submodule "magit"]
	no-byte-compile = lisp/magit-libgit.el
#+end_src
#+begin_src elisp
(use-package man
  :defer t
  :config (setq Man-width 80))
#+end_src

#+begin_src elisp
(use-package paren
  :config (show-paren-mode))
#+end_src

#+begin_src elisp
(use-package prog-mode
  :config (global-prettify-symbols-mode)
  (defun indicate-buffer-boundaries-left ()
    (setq indicate-buffer-boundaries 'left))
  (add-hook 'prog-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package recentf
  :demand t
  :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?x?:"))
#+end_src

#+begin_src elisp
(use-package savehist
  :config (savehist-mode))
#+end_src

#+begin_src elisp
(use-package saveplace
  :when (version< "25" emacs-version)
  :config (save-place-mode))
#+end_src

#+begin_src elisp
(use-package simple
  :config (column-number-mode))
#+end_src

#+begin_src elisp
(use-package smerge-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'smerge-refined-removed nil :extend t)
    (set-face-attribute 'smerge-refined-added   nil :extend t)))
#+end_src

#+begin_src elisp
(progn ;    `text-mode'
  (add-hook 'text-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package tramp
  :defer t
  :config
  (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
  (add-to-list 'tramp-default-proxies-alist
	       (list (regexp-quote (system-name)) nil nil))
  (setq vc-ignore-dir-regexp
	(format "\\(%s\\)\\|\\(%s\\)"
		vc-ignore-dir-regexp
		tramp-file-name-regexp)))
#+end_src

#+begin_src elisp
(use-package tramp-sh
  :defer t
  :config (cl-pushnew 'tramp-own-remote-path tramp-remote-path))
#+end_src

** Treemacs
#+begin_src elisp
  (use-package treemacs
  :disabled
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs
            (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex
            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method
            'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file
            (expand-file-name ".cache/treemacs-persist"
             user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories
             '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  )

(use-package treemacs-projectile
  :after (treemacs projectile)
  )

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  )

(use-package treemacs-magit
  :after (treemacs magit)
  )

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

All the el files in treemacs are in =src/elisp= and =src/extra=
#+begin_src conf
  [submodule "treemacs"]
    load-path = src/elisp
    load-path = src/extra
#+end_src
** Dirvish
Dropin replacement for dired.

#+begin_src elisp
  (use-package dirvish
  :init
    (dirvish-override-dired-mode)
  :hook
    (dired-mode . solaire-mode)
  :custom
    (dirvish-quick-access-entries ;`setq' won't work for custom
      '(("h" "~/"                          "Home")
  	("d" "~/Downloads/"                "Downloads")
  	("m" "/mnt/"                       "Drives")
  	("t" "~/.local/share/Trash/files/" "TrashCan"))
    )
  :config
    (dirvish-define-preview exa (file)
    "Use `exa' to generate directory preview."
    :require ("exa") ; tell Dirvish to check if we have the executable
    (when (file-directory-p file) ; we only interest in directories here
  	`(shell . ("exa" "-al" "--color=always" "--icons"
  		"--group-directories-first" ,file))))

    (add-to-list 'dirvish-preview-dispatchers 'exa)
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-path-separators (list "  " "  " "  "))
    (setq dirvish-mode-line-format
  	    '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
  	    '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
  	    "-l --almost-all --human-readable --group-directories-first --no-group")
    (nmap dirvish-mode-map
  	"?"      '(dirvish-dispatch          :wk "Dispatch")
  	"TAB"    '(dirvish-subtree-toggle    :wk "Subtre-toggle")
  	"q"      '(dirvish-quit              :wk "Quit")
  	"h"      '(dired-up-directory        :wk "Up-dir")
  	"l"      '(dired-find-file           :wk "Open/Toggle")
  	"a"      '(dirvish-quick-access      :wk "Access")
  	"f"      '(dirvish-file-info-menu    :wk "File Info Menu")
  	"y"      '(dirvish-yank-menu         :wk "Yank Menu")
  	"N"      '(dirvish-narrow            :wk "Narrow")
  	;         `dired-view-file'
  	"v"      '(dirvish-vc-menu           :wk "View-file")
  	;         `dired-sort-toggle-or-edit'
  	"s"      '(dirvish-quicksort         :wk "Quick-sort")

  	"M-f"    '(dirvish-history-go-forward  :wk "History-forward")
  	"M-b"    '(dirvish-history-go-backward :wk "History-back")
  	"M-l"    '(dirvish-ls-switches-menu    :wk "ls Switch Menu")
  	"M-m"    '(dirvish-mark-menu           :wk "Mark Menu")
  	"M-t"    '(dirvish-layout-toggle       :wk "Layout-toggle")
  	"M-s"    '(dirvish-setup-menu          :wk "Setup-Menu")
  	"M-e"    '(dirvish-emerge-menu         :wk "Emerge-Menu")
  	"M-j"    '(dirvish-fd-jump             :wk "fd-jump")
    )
  )
#+end_src

#+begin_src elisp
  (use-package diredfl
    :hook
    ((dired-mode . diredfl-mode)
     ;; highlight parent and directory preview as well
     (dirvish-directory-view-mode . diredfl-mode))
    :config
    (set-face-attribute 'diredfl-dir-name nil :bold t)
  )
#+end_src

Tweaks to build dirvish. Load dirvish and its extensions.
#+begin_src conf
[submodule "dirvish"]
	load-path = .
	load-path = extensions
#+end_src

** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful information to Emacs' =describe-= command buffers.
For example, if you use =describe-function=, you will not only get the documentation about the function,
you will also see the source code of the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+begin_src elisp
  (use-package helpful
  :bind
     ([remap describe-key]      . helpful-key)
     ([remap describe-command]  . helpful-command)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-function] . helpful-callable)
  )
#+end_src

** Marginalia
#+begin_src elisp
  (use-package marginalia
  :general
    (:keymaps 'minibuffer-local-map
     "M-A" 'marginalia-cycle)
  :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
  :init
    (marginalia-mode)
  )
#+end_src

** Vertico

[[https://github.com/minad/vertico#extensions][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system.

#+begin_src elisp
  (use-package vertico
    :init
    (setq completion-styles '(orderless))
    (setq orderless-component-separator #'orderless-escapable-split-on-space)
    (setq orderless-matching-styles
	'(orderless-initialism orderless-prefixes orderless-regexp))
    ;; Different scroll margin
    ;(setq vertico-scroll-margin 1)
    ;; Show more candidates
    ;(setq vertico-count 20)
    ;; Grow and shrink the Vertico minibuffer
    ;(setq vertico-resize nil)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    ;; use Vertico as an in-buffer completion UI
    (setq completion-in-region-function 'consult-completion-in-region)
    (vertico-mode 1)
  )
#+end_src
tweaks to build vertico
#+begin_src conf
[submodule "vertico"]
	load-path = .
	load-path = extensions
#+end_src
**** Vertico-directory

#+begin_src elisp
(use-package vertico-directory
  :after vertico
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
	      ("RET" . vertico-directory-enter)
	      ("DEL" . vertico-directory-delete-char)
	      ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
**** Vertico-multiform

Vertico-multiform configures Vertico modes per command or completion category.

#+begin_src elisp
  (use-package vertico-multiform
    :after vertico
    :config (vertico-multiform-mode)
  )
#+end_src

**** Vertico-posframe

[[https://github.com/tumashu/vertico-posframe][Vertico-posframe]] is an vertico extension, which lets vertico use posframe to show its candidate menu.

#+begin_src elisp
  (use-package vertico-posframe
  :disabled
  :after vertico-multiform
  :init
    (setq vertico-multiform-commands
	 '((consult-line posframe
	      (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
	      ;(vertico-posframe-fallback-mode . vertico-buffer-mode)
	      (vertico-posframe-width . 50))
	   (execute-extended-command
	      (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
	      (vertico-posframe-fallback-mode . vertico-buffer-mode))
	   (t posframe)
	  )
    )
    (setq vertico-count 20
	  vertico-posframe-border-width 3
	  vertico-posframe-width 140
	  vertico-resize nil)

    ;(vertico-multiform-mode 1)
    ;(vertico-posframe-mode 1)
  )
#+end_src

**** Savehist

#+begin_src elisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
    (use-package savehist
	:init
	(savehist-mode))
#+end_src

#+begin_src elisp
  ;; A few more useful configurations...
    (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	(defun crm-indicator (args)
	(cons (format "[CRM%s] %s"
			(replace-regexp-in-string
			"\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
			crm-separator)
			(car args))
		(cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	    '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)
	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))
#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] provides search and navigation commands based on the Emacs completion function completing-read.

#+begin_src elisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
	 ("C-c M-x" . consult-mode-command)
	 ("C-c h" . consult-history)
	 ("C-c k" . consult-kmacro)
	 ("C-c m" . consult-man)
	 ("C-c i" . consult-info)
	 ([remap Info-search] . consult-info)
	 ;; C-x bindings in `ctl-x-map'
	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	 ;; Custom M-# bindings for fast register access
	 ("M-#" . consult-register-load)
	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	 ("C-M-#" . consult-register)
	 ;; Other custom bindings
	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	 ;; M-g bindings in `goto-map'
	 ("M-g e" . consult-compile-error)
	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	 ("M-g m" . consult-mark)
	 ("M-g k" . consult-global-mark)
	 ("M-g i" . consult-imenu)
	 ("M-g I" . consult-imenu-multi)
	 ;; M-s bindings in `search-map'
	 ("M-s d" . consult-find)
	 ("M-s D" . consult-locate)
	 ("M-s g" . consult-grep)
	 ("M-s G" . consult-git-grep)
	 ("M-s r" . consult-ripgrep)
	 ("M-s l" . consult-line)
	 ("M-s L" . consult-line-multi)
	 ("M-s k" . consult-keep-lines)
	 ("M-s u" . consult-focus-lines)
	 ;; Isearch integration
	 ("M-s e" . consult-isearch-history)
	 :map isearch-mode-map
	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	 ;; Minibuffer history
	 :map minibuffer-local-map
	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
	register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
	xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src

** Blink search

[[https://github.com/manateelazycat/blink-search][Blink-search]] is the fastest multi-source search framework for Emacs.

#+begin_src elisp
  (use-package blink-search
  :config
    (setq blink-search-enable-posframe t)
  )
#+end_src

** Color-rg
[[https://github.com/manateelazycat/color-rg][Color-rg]] is a search and refactoring tool based on ripgrep.
#+begin_src elisp
  (use-package color-rg
  :config
    (general-def isearch-mode-map
      "M-s M-s" 'isearch-toggle-color-rg
    )
  )
#+end_src
** Popweb

* Coding
** LSP-bridge
[[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]] builds a high-speed cache between Emacs and the LSP server.
#+begin_src elisp
  (use-package lsp-bridge
  :init
    (global-lsp-bridge-mode)
  :config
    ;(set-face-attributes 'lsp-bridge-alive-mode-line nil
    ;  :inherit 'variable-pitch
    ;)
  )
#+end_src
tweaks to build lsp-bridge
#+begin_src conf
[submodule "lsp-bridge"]
  load-path = .
  load-path = acm
  load-path = core
#+end_src

** Treesit
You can find the addresses of language parsers at [[https://tree-sitter.github.io/tree-sitter/][treesitter's official doc]].
#+begin_src elisp 
  (use-package treesit
  :commands (treesit-install-language-grammar  
             config/treesit-install-all-languages)
  :init
    (setq treesit-language-source-alist
      '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
        (c . ("https://github.com/tree-sitter/tree-sitter-c"))
        (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
        (css . ("https://github.com/tree-sitter/tree-sitter-css"))
        (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
        (common-lisp . 
          ("https://github.com/theHamsta/tree-sitter-commonlisp"))
        (csharp     . 
          ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
        (dockerfile . 
          ("https://github.com/camdencheek/tree-sitter-dockerfile"))
        (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
        (go . ("https://github.com/tree-sitter/tree-sitter-go"))
        (gomod      . 
          ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
        (html . ("https://github.com/tree-sitter/tree-sitter-html"))
        (java       . 
          ("https://github.com/tree-sitter/tree-sitter-java.git"))
        (javascript .   
          ("https://github.com/tree-sitter/tree-sitter-javascript"))
        (json . ("https://github.com/tree-sitter/tree-sitter-json"))
        (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
        (make . ("https://github.com/alemuller/tree-sitter-make"))
        (markdown . 
          ("https://github.com/MDeiml/tree-sitter-markdown" nil   
          "tree-sitter-markdown/src"))
        (ocaml . 
            ("https://github.com/tree-sitter/tree-sitter-ocaml" nil 
            "ocaml/src"))
        (org . ("https://github.com/milisims/tree-sitter-org"))
        (python . ("https://github.com/tree-sitter/tree-sitter-python"))
        (php . ("https://github.com/tree-sitter/tree-sitter-php"))
        (typescript . 
            ("https://github.com/tree-sitter/tree-sitter-typescript" nil 
            "typescript/src"))
        (tsx . 
            ("https://github.com/tree-sitter/tree-sitter-typescript" nil 
            "tsx/src"))
        (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
        (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
        (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
        (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
        (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
        (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
        (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
  :config
  (defun config/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (treesit-install-language-grammar lang)
        (message "`%s' parser was installed." lang)
        (sit-for 0.75)))))
  ;; stolen from lazycat
  (setq major-mode-remap-alist
        '((c-mode          . c-ts-mode)
          (c++-mode        . c++-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (css-mode        . css-ts-mode)
          (js-mode         . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (python-mode     . python-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)
          (rust-mode       . rust-ts-mode)
          ))

  (add-hook 'markdown-mode-hook #'(lambda () 
  				  (treesit-parser-create 'markdown)))

  (add-hook 'web-mode-hook #'(lambda ()
  			     (let ((file-name (buffer-file-name)))
  			       (when file-name
  				 (treesit-parser-create
  				  (pcase (file-name-extension file-name)
  				    ("vue" 'vue)
  				    ("html" 'html)
  				    ("php" 'php))))
  			       )))

  (add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
  (add-hook 'ielm-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
  (add-hook 'json-mode-hook #'(lambda () (treesit-parser-create 'json)))
  (add-hook 'go-mode-hook #'(lambda () (treesit-parser-create 'go)))
  (add-hook 'java-mode-hook #'(lambda () (treesit-parser-create 'java)))
  (add-hook 'java-ts-mode-hook #'(lambda () (treesit-parser-create 'java)))
  (add-hook 'php-mode-hook #'(lambda () (treesit-parser-create 'php)))
  (add-hook 'php-ts-mode-hook #'(lambda () (treesit-parser-create 'php)))

#+end_src

[[https://github.com/renzmann/treesit-auto][Treesit-auto]] automatically installs and uses tree-sitter major modes in Emacs 29+. If the tree-sitter version can't be used, fall back to the original major mode.
Disabled because I use lazycat's method instead.
#+begin_src elisp
  (use-package treesit-auto
  :disabled
  :config
    (global-treesit-auto-mode))
#+end_src
** UI
*** Line Number
#+begin_src elisp
  (use-package emacs
  :custom-face
    (line-number ((t (
      :weight normal :slant normal :foreground "LightSteelBlue4"     
      :inherit default))))
    (line-number-current-line ((t (
      :inherit (hl-line default) :slant normal :foreground "#ffcc66"))))
  :hook (prog-mode . config/toggle-line-number-absolute)
  :config
    (defun config/toggle-line-number-nil ()
      (interactive)
      (setq display-line-numbers nil)
    )
    (defun config/toggle-line-number-absolute ()
      (interactive)
      (setq display-line-numbers t)
    )
    (defun config/toggle-line-number-relative ()
      (interactive)
      (setq display-line-numbers 'relative)
    )
    (defun config/toggle-line-number-visual ()
      (interactive)
      (setq display-line-numbers 'visual)
    )
    (config/leader :infix "tl"
      ""    '(nil                                :wk "  Line Number ")
      "DEL" '(which-key-undo                     :wk "󰕍 Undo key   ")
      "n"   '(config/toggle-line-number-nil      :wk "󰅖 Nil        ")
      "a"   '(config/toggle-line-number-absolute :wk "󰱇 Absolute   ")
      "r"   '(config/toggle-line-number-relative :wk "󰰠 Relative   ")
      "v"   '(config/toggle-line-number-visual   :wk " Visual     ")
      "h"   '(hl-line-mode                       :wk "󰸱 Hl-line")
    )
  )
#+end_src

*** Rainbow-mode

This minor mode sets background color to strings that match color names.
#+begin_src elisp
   
#+end_src
*** Rainbow-Delimiters
[[https://github.com/Fanael/rainbow-delimiters][Rainbow-delimiters]] is a "rainbow parentheses"-like mode which highlights
parentheses, brackets, and braces according to their depth.
#+begin_src elisp
  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src
*** Highlight-Indent-Guides
[[https://github.com/DarthFennec/highlight-indent-guides][Highlight-Indent-Guides]] is a minor mode that highlights indentation levels via font-lock.
#+begin_src elisp
  (use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
    (setq highlight-indent-guides-method 'character
          highlight-indent-guides-character 9474 
          highlight-indent-guides-auto-enabled nil
    )
    (set-face-attribute 'highlight-indent-guides-character-face nil
      :foreground "LightSteelBlue4")
    (set-face-attribute 'highlight-indent-guides-top-character-face nil
      :foreground "#ffcc66")

  )
#+end_src
** Smartparens
[[https://github.com/Fuco1/smartparens][Smartparens]] is minor mode for Emacs that deals with parens pairs
and tries to be smart about it.
#+begin_src elisp
  (use-package smartparens
  :config
    (smartparens-global-mode)
  ) 
#+end_src
** Fingertip

fingertip.el is a plugin that provides grammatical edit base on treesit
#+begin_src elisp
  (use-package fingertip
  :config
    (dolist (hook (list
		'c-mode-common-hook 'c-mode-hook 'c++-mode-hook
		'c-ts-mode-hook 'c++-ts-mode-hook
		'cmake-ts-mode-hook
		'java-mode-hook
		'haskell-mode-hook
		'emacs-lisp-mode-hook 
             'lisp-interaction-mode-hook 'lisp-mode-hook
		'maxima-mode-hook
		'ielm-mode-hook
		'bash-ts-mode-hook 'sh-mode-hook
		'makefile-gmake-mode-hook
		'php-mode-hook
		'python-mode-hook 'python-ts-mode-hook
		'js-mode-hook
		'go-mode-hook
		'qml-mode-hook
		'jade-mode-hook
		'css-mode-hook 'css-ts-mode-hook
		'ruby-mode-hook
		'coffee-mode-hook
		'rust-mode-hook 'rust-ts-mode-hook
		'qmake-mode-hook
		'lua-mode-hook
		'swift-mode-hook
		'web-mode-hook
		'markdown-mode-hook
		'llvm-mode-hook
		'conf-conf-mode-hook 'conf-ts-mode-hook
		'nim-mode-hook
		'typescript-mode-hook 'typescript-ts-mode-hook
		'js-ts-mode-hook 'json-ts-mode-hook
		))
    (add-hook hook #'(lambda () (fingertip-mode 1))))
    (general-def
      :keymaps 'fingertip-mode-map
	"(" 'fingertip-open-round
	"[" 'fingertip-open-bracket
	"{" 'fingertip-open-curly
	")" 'fingertip-close-round
	"]" 'fingertip-close-bracket
	"}" 'fingertip-close-curly
	"=" 'fingertip-equal

	"%" 'fingertip-match-paren
	"\"" 'fingertip-double-quote
	"'" 'fingertip-single-quote

	"SPC" 'fingertip-space
	"RET" 'fingertip-newline

	"M-o" 'fingertip-backward-delete
	"C-d" 'fingertip-forward-delete
	"C-k" 'fingertip-kill

	"M-\"" 'fingertip-wrap-double-quote
	"M-'" 'fingertip-wrap-single-quote
	"M-[" 'fingertip-wrap-bracket
	"M-{" 'fingertip-wrap-curly
	"M-(" 'fingertip-wrap-round
	"M-)" 'fingertip-unwrap

	"M-p" 'fingertip-jump-right
	"M-n" 'fingertip-jump-left
	"M-:" 'fingertip-jump-out-pair-and-newline

	"C-j" 'fingertip-jump-up
    )
  )

#+end_src

** Aggressive-Indent
[[https://github.com/Malabarba/aggressive-indent-mode][Aggressive-indent-mode]] is a minor mode that keeps your code always
indented.  It reindents after every change, making it more reliable
than `electric-indent-mode'.
#+begin_src elisp
  (use-package aggressive-indent
  :config
    (global-aggressive-indent-mode 1)
  ) 
#+end_src
** YASnippet
[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
#+begin_src elisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
)
#+end_src

** AAS
[[https://github.com/ymarco/auto-activating-snippets][AAS (Auto Activating Snippets)]] implements an engine for auto-expanding snippets. It is done by tracking your inputted chars along a tree until you complete a registered key sequence.
#+begin_src elisp
(use-package aas
  :hook (LaTeX-mode . aas-activate-for-major-mode)
  :hook (org-mode . aas-activate-for-major-mode)
  :config
  (aas-set-snippets 'text-mode
    ;; expand unconditionally
    ";o-" "ō"
    ";i-" "ī"
    ";a-" "ā"
    ";u-" "ū"
    ";e-" "ē")
  (aas-set-snippets 'latex-mode
    ;; set condition!
    :cond #'texmathp ; expand only while in math
    "supp" "\\supp"
    "On" "O(n)"
    "O1" "O(1)"
    "Olog" "O(\\log n)"
    "Olon" "O(n \\log n)"
    ;; Use YAS/Tempel snippets with ease!
    "amin" '(yas "\\argmin_{$1}") ; YASnippet snippet shorthand form
    "amax" '(tempel "\\argmax_{" p "}") ; Tempel snippet shorthand form
    ;; bind to functions!
    ";ig" #'insert-register
    ";call-sin"
    (lambda (angle) ; Get as fancy as you like
      (interactive "sAngle: ")
      (insert (format "%s" (sin (string-to-number angle))))))
  ;; disable snippets by redefining them with a nil expansion
  (aas-set-snippets 'latex-mode
    "supp" nil))
#+end_src

** Copilot
https://github.com/zerolfx/copilot.el

* Languages
** elisp
- buttercup
- elisp-def
- elisp-demos
- [[highlight-quoted]]
- macrostep
- oversee
** LaTeX
*** AUCTeX
#+begin_src elisp
  (use-package lsp-bridge
  :config
    (setq lsp-bridge-tex-lsp-server "digestif")
  )
#+end_src
#+begin_src elisp
(use-package auctex)
#+end_src
AucTex needs some tweaks to be built.
#+begin_src conf :tangle .borgconfig
[submodule "auctex"]
	load-path = .
	build-step = ./autogen.sh
	build-step = ./configure
	build-step = make
	build-step = make doc
	build-step = borg-maketexi
	build-step = borg-makeinfo
	build-step = borg-update-autoloads
#+end_src
*** CDTeX

*** LAAS
[[https://github.com/tecosaur/LaTeX-auto-activating-snippets][LASS (LaTeX Auto Activating Snippets)]] is a chunky set of LaTeX snippets for the auto-activating-snippets engine.

#+begin_src elisp
(use-package laas
  :hook (LaTeX-mode . laas-mode))
#+end_src

* Org
** Kbd
*** Evil-org
#+begin_src elisp
  (use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  )
#+end_src

** UI
*** Fonts

Change the font size of different org-levels.
#+begin_src elisp
  (use-package org
  :custom-face
    (org-latex-and-related ((t (:foreground "LightSteelBlue4" :weight bold))))
    (org-meta-line ((t (:foreground "LightSteelBlue4"))))
    (org-special-keyword ((t (:foreground "LightSteelBlue4"))))
    (org-tag ((t (:foreground "LightSteelBlue4" :weight normal))))
  :hook (org-mode . mixed-pitch-mode)
  :config
    (set-face-attribute 'org-level-1 nil
	:family "Sarasa Gothic SC" :height 1.8 )
    (set-face-attribute 'org-level-2 nil
	:family "Sarasa Gothic SC" :height 1.6 )
    (set-face-attribute 'org-level-3 nil
	:family "Sarasa Gothic SC" :height 1.4 )
    (set-face-attribute 'org-level-4 nil
	:family "Sarasa Gothic SC" :height 1.3 )
    (set-face-attribute 'org-level-5 nil
	:family "Sarasa Gothic SC" :height 1.2 )
    (set-face-attribute 'org-level-6 nil
	:family "Sarasa Gothic SC" :height 1.1 )
    (set-face-attribute 'org-document-title nil
	:family "Sarasa Gothic SC" :height 2.5 :bold t)
    (set-face-attribute 'org-document-info nil
	:family "Sarasa Gothic SC" :height 1.8 :bold t)
    (set-face-attribute 'org-document-info-keyword nil
      :foreground "LightSteelBlue4" :inherit 'org-document-info)
    (set-face-attribute 'org-block t
      :extend t :inherit 'fixed-pitch)
  )
#+end_src

*** Bullets

[[https://github.com/minad/org-modern][Org-modern]] implements a modern style for Org buffers using font locking and text properties. The package styles =headlines=, =keywords=, =tables= and =source blocks=.

#+begin_src elisp
  (use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
     (setq org-modern-keyword
       (quote (("author" . "⛾")
	       ("title" . "❖")
	       ("subtitle" . "◈")
	       ("html" . "󰅱 ")
	       (t . t))))
     (setq org-modern-star
	  ;'("◉" "○" "◈" "◇" "✳")
	  '("⚀" "⚁" "⚂" "⚃" "⚄" "⚅")
	  ;'("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")
     )
     (setq org-modern-list ;; for '+' '-' '*' respectively
	 '((43 . "⯌") (45 . "⮚") (42 . "⊛"))
     )
     (setq org-modern-block-fringe nil)
     (setq org-modern-todo nil)
     (setq org-modern-block-name '("⇲ " . "⇱ "))
     (set-face-attribute 'org-modern-block-name nil
	:inherit 'variable-pitch)
     (setq org-modern-table nil)
  )
#+end_src

[[https://github.com/integral-dw/org-superstar-mode][Org-superstar]] replaces the asterisk before every org-level with ascii symbols.
Disabled because org-morden is a drop-in replacement.

#+begin_src elisp
  (use-package org-superstar
  :defer t
  ;:hook (org-mode . org-superstar-mode)
  :init
    (setq
      ;;org-superstar-headline-bullets-list '("󰇊" "󰇋" "󰇌" "󰇍" "󰇎" "󰇏")
      org-superstar-special-todo-items t
      ;;org-ellipsis "  "
    )
  )
#+end_src

*** Indent lines
[[https://github.com/tonyaldon/org-bars][Org-bars-mode]] is a minor mode for org-mode.
It adds bars to the virtual indentation provided by the built-in package org-indent.
Have drawbacks when using mixed-pitch-mode.

#+begin_src elisp
  (use-package org-bars
  :defer t
  :commands 'org-bars-mode
  ;:hook (org-mode . org-bars-mode)
  :custom-face
    (org-visual-indent-blank-pipe-face ((t (:background "#1f2430" :foreground "#1f2430" :height 0.1 :width extra-expanded))))
    (org-visual-indent-pipe-face ((t (:background "slate gray" :foreground "slate gray" :height 0.1))))
  :config
    (setq org-bars-color-options '(
	  :desaturate-level-faces 100
	  :darken-level-faces 10
    ))
    (setq org-bars-extra-pixels-height 25)
    (setq org-bars-stars '(:empty "" :invisible "" :visible ""))
  )
#+end_src

[[https://github.com/legalnonsense/org-visual-outline][Org-visual-outline]] does the same as Org-bars-mode. It is split into two independent packages:
- Org-dynamic-bullets :: handles the dynamic bullets. =Brokes highlight=.
- Org-visual-indent  :: adds vertical lines to org-indent. =Does better than Org-bars-mode=

#+begin_src elisp
  (use-package org-visual-outline
  :hook (org-mode . org-visual-indent-mode)
  )
#+end_src

*** valign

This package provides visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters and images. Meanwhile, the text-based alignment generated by Org mode (or Markdown mode) is left untouched.
#+begin_src elisp
  (use-package valign
  :hook (org-mode . valign-mode)
  :config
    (setq valign-fancy-bar t)
  )
#+end_src

*** Highlight TODO

#+begin_src elisp
  (use-package hl-todo
    :init
    (hl-todo-mode)
  )
#+end_src

*** Fancy-priorities
#+begin_src elisp
  (use-package org-fancy-priorities)
#+end_src

*** Org-appear
[[https://github.com/awth13/org-appearAutomatically][Org-appear]] disaply emphasis markers and links when the cursor is on them.
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-appear-autoemphasis  t
          ;org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-autoentities t
          org-appear-autokeywords t
          org-appear-inside-latex t
          org-hide-emphasis-markers t
    )
  )
#+end_src

** Blocks

*** Code block
#+begin_src elisp
  (use-package org
  :init
    (setq electric-indent-mode nil)
  :config
    (setq org-src-tab-acts-natively t)
    (setq org-src-preserve-indentation nil)
  )
#+end_src

[[https://github.com/yilkalargaw/org-auto-tangle][Org-auto-tangle]] Automatically and Asynchronously tangles org files on save.
Adding the option =#+auto_tangle: t= in an org file to auto-tangle.
Or setting the =org-auto-tangle-default= variable to t to configure auto-tangle as the default behavior for all org buffers. In this case, it can be disabled for some buffers by adding =#+auto_tangle:nil=.
#+begin_src elisp
  (use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  )
#+end_src

*** Table-block
[[https://github.com/casouri/valign][Valign]] provides visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters and images. Meanwhile, the text-based alignment generated by Org mode (or Markdown mode) is left untouched.
Disabled cause org-modern already does the job.

[[https://github.com/tbanel/orgaggregate][Orgtbl-aggregate]] can creat a new table by computing sums, averages, and so on, out of material from the first table.

** Roam

#+begin_src elisp
  (use-package org-roam
  :after org
  :init
    (setq org-roam-directory (file-truename "~/roam"))
    (setq org-roam-v2-ack t)
  )
#+end_src

** LaTeX
*** Org 9.7
#+begin_src elisp
  (use-package org
  :init
    (setq org-element-cache-persistent nil)
    (setq org-element-use-cache nil)
    (setq org-latex-preview-numbered t)
    (plist-put org-latex-preview-options :zoom 1.25)
    (let ((pos (assoc 'dvisvgm org-latex-preview-process-alist)))
      (plist-put (cdr pos) :image-converter '("dvisvgm --page=1- --optimize --clipjoin --relative --no-fonts --bbox=preview -o %B-%%9p.svg %f")))
  :config
    (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  )
#+end_src

*** Org-fragtog
[[https://github.com/io12/org-fragtog][Org-fragtog]] automatically toggle Org mode LaTeX fragment previews as the cursor enters and exits them

Code under :config is taken from https://emacs-china.org/t/org-mode-latex-mode/22490
#+begin_src elisp
  (use-package org-fragtog
  :config
      ;; Vertically align LaTeX preview in org mode
      (defun my-org-latex-preview-advice (beg end &rest _args)
      (let* ((ov (car (overlays-at (/ (+ beg end) 2) t)))
	      (img (cdr (overlay-get ov 'display)))
	      (new-img (plist-put img :ascent 95)))
	  (overlay-put ov 'display (cons 'image new-img))))
      (advice-add 'org--make-preview-overlay
		  :after #'my-org-latex-preview-advice)

      ;; from: https://kitchingroup.cheme.cmu.edu/blog/2016/11/06/
      ;; Justifying-LaTeX-preview-fragments-in-org-mode/
      ;; specify the justification you want
      (plist-put org-format-latex-options :justify 'right)

      (defun eli/org-justify-fragment-overlay (beg end image imagetype)
      (let* ((position (plist-get org-format-latex-options :justify))
	      (img (create-image image 'svg t))
	      (ov (car (overlays-at (/ (+ beg end) 2) t)))
	      (width (car (image-display-size (overlay-get ov 'display))))
	      offset)
	  (cond
	  ((and (eq 'center position)
	      (= beg (line-beginning-position)))
	  (setq offset (floor (- (/ fill-column 2)
				  (/ width 2))))
	  (if (< offset 0)
	      (setq offset 0))
	  (overlay-put ov 'before-string (make-string offset ? )))
	  ((and (eq 'right position)
	      (= beg (line-beginning-position)))
	  (setq offset (floor (- fill-column
				  width)))
	  (if (< offset 0)
	      (setq offset 0))
	  (overlay-put ov 'before-string (make-string offset ? ))))))
      (advice-add 'org--make-preview-overlay
		  :after 'eli/org-justify-fragment-overlay)

      ;; from: https://kitchingroup.cheme.cmu.edu/blog/2016/11/07/
      ;; Better-equation-numbering-in-LaTeX-fragments-in-org-mode/
      (defun org-renumber-environment (orig-func &rest args)
      (let ((results '())
	      (counter -1)
	      (numberp))
	  (setq results (cl-loop for (begin .  env) in
	      (org-element-map (org-element-parse-buffer)
		  'latex-environment
		  (lambda (env)
		  (cons
		      (org-element-property :begin env)
		      (org-element-property :value env))))
	      collect
	      (cond
		  ((and (string-match "\\\\begin{equation}" env)
		      (not (string-match "\\\\tag{" env)))
		  (cl-incf counter)
		  (cons begin counter))
		  ((and (string-match "\\\\begin{align}" env)
		      (string-match "\\\\notag" env))
		  (cl-incf counter)
		  (cons begin counter))
		  ((string-match "\\\\begin{align}" env)
		  (prog2
		      (cl-incf counter)
		      (cons begin counter)
		  (with-temp-buffer
		      (insert env)
		      (goto-char (point-min))
		      ;; \\ is used for a new line. Each one leads
		      ;; to a number
		      (cl-incf counter (count-matches "\\\\$"))
		      ;; unless there are nonumbers.
		      (goto-char (point-min))
		      (cl-decf counter
			      (count-matches "\\nonumber")))))
		  (t
		  (cons begin nil)))))
	  (when (setq numberp (cdr (assoc (point) results)))
	  (setf (car args)
		  (concat
		  (format "\\setcounter{equation}{%s}\n" numberp)
		  (car args)))))
      (apply orig-func args))
      (advice-add 'org-create-formula-image :around #'org-renumber-environment)
  )
#+end_src

** GTD
#+begin_src elisp
  (use-package org-gtd
  :after org
  :init
    (setq org-gtd-update-ack "3.0.0")
  )
#+end_src

** Pandoc
#+begin_src elisp
;; (use-package org-pandoc)
#+end_src

* Emacs OS
** Elfeed
#+begin_src elisp
  (use-package elfeed
  :config
    (setq elfeed-feeds '(
	("http://nullprogram.com/feed/" blog emacs)
	"http://www.50ply.com/atom.xml"  ; no autotagging
	("http://nedroid.com/feed/" webcomic)
      )
    )
  )
#+end_src
** Mu4e
#+begin_src conf
  [submodule "mu4e"]
    build-step = ./autogen.sh
    build-step = make -C mu4e > /dev/null
    build-step = borg-update-autoloads
    load-path = build/mu4e
#+end_src
** Eaf

[[https://github.com/emacs-eaf/emacs-application-framework][EAF]] is an extensible framework that revolutionizes the graphical capabilities of Emacs.
#+begin_src elisp
  (use-package eaf
  :disabled
  :custom
    ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
  :config
    (defalias 'browse-web #'eaf-open-browser)
    ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)
    (setq confirm-kill-processes nil)
  ) ;; unbind, see more in the Wiki

  ;(use-package eaf-browser)
  ;(use-package eaf-pdf-viewer)
#+end_src
tweaks to build eaf
#+begin_src conf
[submodule "eaf"]
  load-path = .
  load-path = core
  load-path = extension
#+end_src
** Games
** Tetris
#+begin_src elisp
  (add-hook 'tetris-mode-hook
    (defun config/tetris-center ()
      (config/window-center 76)
    )
  )
#+end_src

** 2048
#+begin_src elisp
  (add-hook '2048-mode-hook
    (defun config/2048-center ()
      (config/window-center 35)
    )
  )
#+end_src

* Tequila worms
#+begin_src elisp
(progn ;     startup
  (message "Loading %s...done (%fs)" user-init-file
	   (float-time (time-subtract (current-time)
				      before-user-init-time)))
  (add-hook 'after-init-hook
	    (lambda ()
	      (message
	       "Loading %s...done (%fs) [after-init]" user-init-file
	       (float-time (time-subtract (current-time)
					  before-user-init-time))))
	    t))

(progn ;     personalize
  (let ((file (expand-file-name (concat (user-real-login-name) ".el")
				user-emacs-directory)))
    (when (file-exists-p file)
      (load file))))

;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; init.el ends here
#+end_src

* TODOs
- pixel-scroll-precision-mode for evil scroll
- vertico-buffer & minibuffer
- Org mode
    + Roam
    + GTD

- Posframe for magit and others
- Line number format: see
 https://emacs.stackexchange.com/questions/52269/how-to-change-line-number-gutter-width-using-display-line-numbers-mode


- Dirvish and olivetti-mode compativity
