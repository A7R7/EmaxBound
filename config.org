:DOC-CONFIG:
# Tangle by default to init.el, which is the most common case
#+PROPERTY: header-args:elisp :tangle init.el :language elisp
#+PROPERTY: header-args:emacs-lisp :tangle init.el :language elisp
#+PROPERTY: header-args:mkdirp yes :comments no
#+STARTUP: fold
#+OPTIONS: toc:2
:END:

#+TITLE: EmaxBound Configuration
#+AUTHOR: A7R7

#+HTML: <img alt="EmaxBound" src="assets/EmacsBound.svg" width="100%">
#+HTML: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://img.shields.io/badge/emacs-29.1-8A2BF2?logo=gnuemacs&logoColor=white"/></a>
#+HTML: <a href="https://github.com/emacscollective/borg"><img alt="Package Manager" src="https://img.shields.io/badge/package_manager-borg-green"/></a>
#+HTML: <a href="https://en.wikipedia.org/wiki/Linux"><img alt="Linux" src="https://img.shields.io/badge/linux-FCC624?logo=linux&logoColor=black"/></a>

* Screenshots
#+HTML: <img alt="Dashboard" src="assets/dashboard.png" width="100%">
#+HTML: <img alt="Org Mode" src="assets/org_mode.png" width="100%">
* Introduction
** How to deploy this config

This config file is still in its early stages of development, *Everything is unstable!*
To play around with my config files, clone this repo anywhere you like on your system.
#+begin_src bash
git clone --depth=1 https://github.com/A7R7/EmaxBound.git
#+end_src
Then, simply execute these make rules inside the repo directory.
#+begin_src bash
make bootstrap-borg  # bootstrap borg itself
make bootstrap       # bootstrap collective or new drones
#+end_src

If you're using emacs29 or above, run ~emacs --init-directory=<path-of-the-repo>~ (replace the path).
Else, you can have a look at [[https://github.com/plexus/chemacs2][chemacs2]], which makes it easy to run multiple Emacs configurations side by side.

** How I built this config

The whole config structure is built upon [[https://github.com/emacscollective/emacs.g][emacscollective/emacs.g]].
It is a starter-kit using borg as the package manager, which utilizes git submodules to maintain all its packages.
Check [[https://emacsmirror.net/manual/borg/Bootstrapping-using-a-seed.html][Bootstrapping-using-a-seed]] from its [[https://emacsmirror.net/manual/borg/][manual]] to see how to build the config structure.

- Firstly, I generated the structure from the seed.
- Then, I copied and pasted all the original code from init.el and early-init.el to this org file.
- Last, most further config does not go beyond the following 2 steps:

  + Run [[elisp: borg-assimilate][M-x borg-assimilate]] and input the name of the package to install this package.
  + Write config codes into this org file, then run [[elisp:org-babel-tangle][M-x org-babel-tangle]] so that emacs writes the codes into the corresponding file.

ps: For some packages, you need to manually specify its load path or build method in ~.borgconfig~ for them to work.

For example, some packages have an ~extensions~ dir in their repo. To load these extensions, you need to add ~load-path = .~ and ~load-path = extensions~ under the corresponding submodule inside ~.borgconfig~.

** References

-  [[https://github.com/lccambiaghi/vanilla-emacs][Luca's vanilla-emacs]] (2023) detailed org config file.
-  [[https://gitlab.com/dwt1/configuring-emacs][DistroTube's Configuring Emacs]] (2023) easy to follow.
-  [[https://github.com/seagle0128/.emacs.d][seagle0128's Centaur Emacs]] (2023) be morden.
-  [[https://github.com/daviwil/emacs-from-scratch][Daviwell's Emacs from scratch]] (2021) intuitive.
-  [[https://github.com/lijigang/100-questions-about-orgmode][lijigang's 100-questions-about-orgmode]] (2023) for org mode of course.
*NOTE*: the year number after link equals to
- =min (last time the config get's updated, last time I refered to the config)=
  
* Early Init

*NOTE*: codes under this heading is tangled to early-init.el

File header, disable byte-compile
#+begin_src elisp :tangle early-init.el
;;; early-init.el --- earliest birds  -*- lexical-binding: t; -*- no-byte-compile: t -*-
#+end_src

Disable tool-bar, menu-bar and scroll-bar before they're loaded.
#+begin_src elisp :tangle early-init.el
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Borg seed generated configs.
#+begin_src elisp :tangle early-init.el
(setq load-prefer-newer t)

(let ((dir (file-name-directory (or load-file-name buffer-file-name))))
  (add-to-list 'load-path (expand-file-name "lib/compat" dir))
  (add-to-list 'load-path (expand-file-name "lib/packed" dir))
  (add-to-list 'load-path (expand-file-name "lib/auto-compile" dir)))
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)

(setq package-enable-at-startup nil)

(with-eval-after-load 'package
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t))
;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; End:
;;; early-init.el ends here
#+end_src

* Init
** File-local-variable

Disable byte compile for init.el, according to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][emacs manual]].

#+begin_src elisp
;;; init.el --- user-init-file
;;; -*- lexical-binding: t; no-byte-compile: t -*-
#+end_src

** Basic setups

#+begin_src elisp
  ;;; Early birds
  (progn ;     startup
    (defvar before-user-init-time (current-time)
      "Value of `current-time' when Emacs begins loading `user-init-file'.")
    (message "Loading Emacs...done (%.3fs)"
             (float-time (time-subtract before-user-init-time
                                        before-init-time)))
    (setq user-init-file (or load-file-name buffer-file-name))
    (setq user-emacs-directory (file-name-directory user-init-file))
    (message "Loading %s..." user-init-file)

    (setq inhibit-startup-buffer-menu t)
    (setq inhibit-startup-screen t)
    (setq inhibit-startup-echo-area-message "locutus")
    (setq initial-buffer-choice t)
    (setq initial-scratch-message "")
    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold most-positive-fixnum)
    ;; Prevent flashing of unstyled modeline at startup
    (setq-default mode-line-format nil)
  )
#+end_src

** Borg
Define a function to assimilate multiple packages at a time
#+begin_src elisp
(eval-and-compile ; `borg'
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (borg-initialize)
;  (defun borg-assimilate-loop ()
;    (interactive)
;    (catch 'loop-end
;      (while t ; Infinite loop until explicitly terminated
;        (condition-case nil
;          (borg-assimilate ()) ; Call your function here
;          (quit (throw 'loop-end nil)))))
;  ) ; Catch 'C-g' (quit) signal and end the loop
)

#+end_src

** Use-package
Use-package is built-in since emacs-29
#+begin_src elisp
(setq use-package-verbose t)
  ;(eval-and-compile ; `use-package'
  ;  (require  'use-package)
  ;  (setq use-package-verbose t))
#+end_src

** dash
#+begin_src elisp
(use-package dash
  :config (global-dash-fontify-mode))
#+end_src

** eieio

#+begin_src elisp
(use-package eieio)
#+end_src

** auto-compile

 [[https://github.com/emacscollective/auto-compile][Auto-Compile]] automatically compile Emacs Lisp libraries

#+begin_src elisp
(use-package auto-compile
  :config
  (setq auto-compile-display-buffer               nil)
  (setq auto-compile-mode-line-counter            t)
  (setq auto-compile-source-recreate-deletes-dest t)
  (setq auto-compile-toggle-deletes-nonlib-dest   t)
  (setq auto-compile-update-autoloads             t)
)
#+end_src

** epkg

 [[https://github.com/emacscollective/epkg][Epkg]] allows you browse the Emacsmirror package database

#+begin_src elisp
(use-package epkg
  :defer t
  :init
  (setq epkg-repository
        (expand-file-name "var/epkgs/" user-emacs-directory))
  (setq epkg-database-connector
        (if (>= emacs-major-version 29) 'sqlite-builtin 'sqlite-module)))
#+end_src

** custom

#+begin_src elisp
(use-package custom
  :no-require t
  :config
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

** server
#+begin_src elisp
(use-package server
  :commands (server-running-p)
  :config (or (server-running-p) (server-mode)))
#+end_src

** elisp
#+begin_src elisp
(progn ;     startup
  (message "Loading early birds...done (%.3fs)"
           (float-time (time-subtract (current-time) before-user-init-time))))
#+end_src

** long tail
#+begin_src elisp
(use-package diff-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'diff-refine-changed nil :extend t)
    (set-face-attribute 'diff-refine-removed nil :extend t)
    (set-face-attribute 'diff-refine-added   nil :extend t)))
#+end_src

#+begin_src elisp
(use-package dired
  :defer t
  :config (setq dired-listing-switches "-alh"))
#+end_src

#+begin_src elisp
(use-package eldoc
  :when (version< "25" emacs-version)
  :config (global-eldoc-mode))
#+end_src

#+begin_src elisp
(use-package help
  :defer t
  :config (temp-buffer-resize-mode))
#+end_src

#+begin_src elisp
(progn ;    `isearch'
  (setq isearch-allow-scroll t))
#+end_src

#+begin_src elisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
  (defun indent-spaces-mode ()
    (setq indent-tabs-mode nil))
  (add-hook 'lisp-interaction-mode-hook 'indent-spaces-mode))
#+end_src

[[https://github.com/magit/magit][Magit]] is a VERY powerful git client.

#+begin_src elisp
(use-package magit
  :defer t
  :commands (magit-add-section-hook)
  :config
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-modules
                          'magit-insert-stashes
                          'append))
#+end_src

#+begin_src elisp
(use-package man
  :defer t
  :config (setq Man-width 80))
#+end_src

#+begin_src elisp
(use-package paren
  :config (show-paren-mode))
#+end_src

#+begin_src elisp
(use-package prog-mode
  :config (global-prettify-symbols-mode)
  (defun indicate-buffer-boundaries-left ()
    (setq indicate-buffer-boundaries 'left))
  (add-hook 'prog-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package recentf
  :demand t
  :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?x?:"))
#+end_src

#+begin_src elisp
(use-package savehist
  :config (savehist-mode))
#+end_src

#+begin_src elisp
(use-package saveplace
  :when (version< "25" emacs-version)
  :config (save-place-mode))
#+end_src

#+begin_src elisp
(use-package simple
  :config (column-number-mode))
#+end_src

#+begin_src elisp
(use-package smerge-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'smerge-refined-removed nil :extend t)
    (set-face-attribute 'smerge-refined-added   nil :extend t)))
#+end_src

#+begin_src elisp
(progn ;    `text-mode'
  (add-hook 'text-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package tramp
  :defer t
  :config
  (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
  (add-to-list 'tramp-default-proxies-alist
               (list (regexp-quote (system-name)) nil nil))
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp)))
#+end_src

#+begin_src elisp
(use-package tramp-sh
  :defer t
  :config (cl-pushnew 'tramp-own-remote-path tramp-remote-path))
#+end_src

** Tequila worms
#+begin_src elisp
(progn ;     startup
  (message "Loading %s...done (%.3fs)" user-init-file
           (float-time (time-subtract (current-time)
                                      before-user-init-time)))
  (add-hook 'after-init-hook
            (lambda ()
              (message
               "Loading %s...done (%.3fs) [after-init]" user-init-file
               (float-time (time-subtract (current-time)
                                          before-user-init-time))))
            t))

(progn ;     personalize
  (let ((file (expand-file-name (concat (user-real-login-name) ".el")
                                user-emacs-directory)))
    (when (file-exists-p file)
      (load file))))

;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; init.el ends here
#+end_src

* Kbd 

We setup keybinding framworks and basic keybindings at this place. Note that not all keybindings are set here. Some package specific keybinding configs are set under where the package is configed

** Evil
*** Evil mode

[[https://github.com/emacs-evil/evil][Evil mode]] that turns you into an evil.

#+begin_src elisp
  (use-package evil
    :init
      (setq evil-want-integration t) ;; t by default
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (setq evil-want-C-u-scroll t)

    :config
      (evil-mode 1)
        ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal)
      (evil-define-key 'normal 'foo-mode "e" 'baz)
  )
#+end_src

*** Evil collection

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] automatically configures various Emacs modes with Vi-like keybindings.

#+begin_src elisp
  (use-package evil-collection
    ;; :demand t
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    ;(setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  (use-package evil-tutor
    :demand t)

  (use-package emacs
    :config (setq ring-bell-function #'ignore)
  )
#+end_src

*** Undo-tree
#+begin_src elisp
  (use-package undo-tree
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1)
  )
#+end_src

** General

[[https://github.com/noctuid/general.el][General]] provides a more convenient method for binding keys in emacs
(for both evil and non-evil users).

*Note*: byte compile init.el will lead to function created by general-create-definer failed to work. See [[Header]].
#+begin_src elisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
  :after evil
  :config
    ;; (general-evil-setup)
    ;; set up 'SPC' as the global leader key

    (general-evil-setup t)
    (general-create-definer config/leader
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (config/leader
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key"))

    (config/leader :infix "b"
        ""        '(nil                            :wk "  Buffer ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
        "b"       '(switch-to-buffer               :wk " Switch ")
        "d"       '(kill-this-buffer               :wk "󰅖 Delete ")
        "r"       '(revert-buffer                  :wk "󰑓 Reload ")
        "["       '(previous-buffer                :wk " Prev ")
        "]"       '(next-buffer                    :wk " Next ")
    )
    (config/leader
        "{"       '(centaur-tabs-backward-group    :wk " Prev Group")
        "}"       '(centaur-tabs-forward-group     :wk " Next Group")
        "["       '(centaur-tabs-backward          :wk " Prev Buffer ")
        "]"       '(centaur-tabs-forward           :wk " Next Buffer ")
    )

    (config/leader :infix "TAB"
        ""        '(nil                            :wk " 󰓩 Tab ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
        "TAB"     '(tab-new                        :wk "󰝜 Tab New ")
        "d"       '(tab-close                      :wk "󰭌 Tab Del ")
        "["       '(tab-previous                   :wk " Prev ")
        "]"       '(tab-next                       :wk " Next ")
    )

    (config/leader :infix "w"
        ""        '(nil                            :wk " 󰓩 Tab ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key")
        "d"       '(delete-window                  :wk "󰅖 Delete  ")
        "v"       '(split-window-vertically        :wk "󰤻 Split   ")
        "s"       '(split-window-horizontally      :wk "󰤼 Split   ")
        "h"       '(evil-window-left               :wk " Focus H ")
        "j"       '(evil-window-down               :wk " Focus J ")
        "k"       '(evil-window-up                 :wk " Focus K ")
        "l"       '(evil-window-right              :wk " Focus L ")
        "\\"      '(split-window-vertically        :wk "󰤻 Split   ")
        "|"       '(split-window-horizontally      :wk "󰤼 Split   ")
    )
    (config/leader :infix "w"
        "\\"      '(split-window-vertically        :wk "󰤻 Split   ")
        "|"       '(split-window-horizontally      :wk "󰤼 Split   ")
    )

    (config/leader :infix "B"
        ""        '(nil                            :wk " 󰏗 Borg      ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
        "a"       '(borg-assimilate                :wk "󱧕 Assimilate ")
        "A"       '(borg-activate                  :wk " Activate   ")
        "b"       '(borg-build                     :wk "󱇝 Build      ")
        "c"       '(borg-clone                     :wk " Clone      ")
        "r"       '(borg-remove                    :wk "󱧖 Remove     ")
    )

    (config/leader :infix "t"
        ""        '(nil                            :wk "  Toggle    ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
    )

    (config/leader :infix "q"
        ""        '(nil                            :wk " 󰗼 Quit      ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
        "q"       '(save-buffers-kill-terminal     :wk "󰗼 Quit Emacs ")
    )

    (config/leader :infix "g"
        ""        '(nil                            :wk " 󰊢 Git       ")
        "DEL"     '(which-key-undo                 :wk "󰕍 Undo key   ")
        "g"       '(magit                          :wk " Magit      ")
    )

    (config/leader 
        "e"       '(dirvish-side                   :wk "󰙅 Dirvish-side ")
        "E"       '(dirvish                        :wk " Dirvish      ")
        ;"qe"      '(save-buffers-kill-emacs         :wk "Quit Emacs ")
    )
  )
#+end_src

** Which-key

[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+begin_src elisp
  (use-package which-key
  :after general
  :init
    (setq
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-window-location 'bottom
      which-key-side-window-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-idle-secondary-delay 0.01
      which-key-max-description-length 25
      which-key-allow-imprecise-window-fit t
      ;which-key-separator " → "
      which-key-separator " "
      Which-key-show-early-on-C-h t
      which-key-sort-order 'which-key-prefix-then-key-order
    )
    ;(general-define-key
    ;:keymaps 'which-key-mode-map
    ;  "DEL" '(which-key-undo :wk "undo")
    ;)
    (which-key-mode 1)
  )
#+end_src

[[https://github.com/yanghaoxie/which-key-posframe][Which-key-posframe]] use posframe to show which-key popup. 
options for =which-key-posframe-poshandler=:
~posframe-poshandler-[frame/window/point]-[top/bottom/]-[center/left-corner/right-corner]~
#+begin_src elisp
  (use-package which-key-posframe
  :config
    (setq which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-center)
    (which-key-posframe-mode)
  )
#+end_src

** Hydra
** Mouse

* UI

We setup UI for basic emacs widgets at this place. Again, Note that not all UI's are set here. 
Some package specific UI configs are set under where the package is configed.

** Fonts

Defining the various fonts that Emacs will use.
#+begin_src elisp
  (set-face-attribute 'default nil
    ;:font "JetBrainsMono Nerd Font"
    :font "RobotoMono Nerd Font"
    ;:font "Sarasa Term SC Nerd"
    :height 155
    ;:weight 'medium
  )
  (set-face-attribute 'variable-pitch nil
    :font "Sarasa Gothic SC"
    :height 180
  )
  (set-face-attribute 'fixed-pitch nil
    :font "Sarasa Gothic SC"
    :height 180
  )
#+end_src

Makes commented text and keywords italics. Working in emacsclient but not emacs.
#+begin_src elisp
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)
#+end_src

*** Zooming In/Out

You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src elisp
 (use-package emacs
   :init 
     (global-set-key (kbd "C-=")            'text-scale-increase)
     (global-set-key (kbd "C--")            'text-scale-decrease)
     (global-set-key (kbd "<C-wheel-up>")   'text-scale-increase)
     (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
 )
#+end_src

** Icons
*** All-the-icons

[[https://github.com/domtronn/all-the-icons.el][All-the-icons]] is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

;(use-package all-the-icons-dired
;  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

*NOTE*: In order for the icons to work it is very important that you install the Resource Fonts included in this package. Run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

*** Nerd-icons
[[https://github.com/rainstormstudio/nerd-icons.el][Nerd-icons]] is a library for easily using Nerd Font icons inside Emacs, an alternative to all-the-icons.
Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install =Symbols Nerd Fonts Mono= for you.
#+begin_src elisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
)
#+end_src

** Theme
[[https://github.com/hlissner/emacs-doom-themes][Doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

** Text Arrangement
*** Centering

We have 3 modes that can help centering text in a window. But currently we only use olivetti mode.

**** Olivetti

    [[https://github.com/rnkn/olivetti][Olibetti]] is a simple Emacs minor mode for a nice writing environment.
    Set olivetti-style to both margins and fringes for a fancy "page" look.

    Note that for pages with variable-pitch fonts,
    =olivetti-body-width= should be set smaller for it to look good.
                                                                                                                                                                                                                                #+begin_src elisp
    (use-package olivetti
    :hook (org-mode . olivetti-mode)
            (Custom-mode . olivetti-mode)
            (help-mode . olivetti-mode)
            (dashboard-mode . olivetti-mode)
            (dashboard-mode . variable-pitch-mode)
            (olivetti-mode . visual-line-mode)
    :config
        (defun config/adjust-olivetti-body-width ()
        (when (and (boundp 'mixed-pitch-mode) mixed-pitch-mode)
            (setq olivetti-body-width 54)))

        (add-hook 'olivetti-mode-hook 'config/adjust-olivetti-body-width)

        (config/leader
        "tc"  '(olivetti-mode     :wk "󰉠 Center")
        )
    )
                                                                                                                                                                                                                                        #+end_src
**** Visual-fill-column

    [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]]  
    
**** Writeroom-mode

*** Spacing 
[[https://github.com/trevorpogue/topspace][Topspace]] recenter line 1 with scrollable upper margin/padding
#+begin_src elisp
  (use-package topspace
  :hook (dashboard-mode . topspace-mode)
  )
#+end_src
** Transparency

Set background Transparency, according to [[https://www.emacswiki.org/emacs/TransparentEmacs][this page]].
#+begin_src elisp
  (set-frame-parameter nil 'alpha-background 96)
  (add-to-list 'default-frame-alist '(alpha-background . 96))

  (defun config/transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque"
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter nil 'alpha-background value))
#+end_src

** Scroll

This piece of code is taken from https://emacs-china.org/t/topic/25114/5
#+begin_src elisp
(pixel-scroll-precision-mode 1)
(setq pixel-scroll-precision-interpolate-page t)
(defun +pixel-scroll-interpolate-down (&optional lines)
  (interactive)
  (if lines
      (pixel-scroll-precision-interpolate (* -1 lines (pixel-line-height)))
    (pixel-scroll-interpolate-down)))

(defun +pixel-scroll-interpolate-up (&optional lines)
  (interactive)
  (if lines
      (pixel-scroll-precision-interpolate (* lines (pixel-line-height))))
  (pixel-scroll-interpolate-up))

(defalias 'scroll-up-command '+pixel-scroll-interpolate-down)
(defalias 'scroll-down-command '+pixel-scroll-interpolate-up)
#+end_src
** Modeline
[[https://github.com/seagle0128/doom-modeline][Doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src elisp
  (use-package doom-modeline
  :init 
    (setq doom-modeline-height 37)
    (doom-modeline-mode 1)
  :config
  )
#+end_src

*NOTE1*: [[Nerd-icons]] are necessary. Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install the resource fonts.

*NOTE2:* [[All-the-icons]] hasn't been supported since 4.0.0. If you prefer all-the-icons, please use release 3.4.0, then run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

*** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src elisp
(use-package diminish)
#+end_src
** Dashboard
Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
#+begin_src elisp
  (use-package dashboard
  :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; show Dashboard in frames created with emacsclient -c
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner (concat user-emacs-directory "assets/EmacsBound.svg"))  ;; use custom image as banner
    (setq dashboard-center-content t) ;; set to 't' for centered content

    (setq dashboard-items '(
          (recents . 5)
          (agenda . 5 )
          (bookmarks . 3)
          (projects . 3)
          (registers . 3)
    ))

    ;; (dashboard-modify-heading-icons '((recents . "file-text") (bookmarks . "book")))
  :config
    (dashboard-setup-startup-hook)
  )
#+end_src

** Tabs
#+begin_src elisp
  (use-package centaur-tabs
    :hook
      (emacs-startup . centaur-tabs-mode)
      (dired-mode . centaur-tabs-local-mode)
      (dirvish-directory-view-mode . centaur-tabs-local-mode)
      (dashboard-mode . centaur-tabs-local-mode)
    :init
      (setq centaur-tabs-set-icons t
            centaur-tabs-set-modified-marker t
            centaur-tabs-modified-marker "M"
            centaur-tabs-cycle-scope 'tabs
            centaur-tabs-set-bar 'over
            centaur-tabs-enable-ido-completion nil
      )
      (centaur-tabs-mode t)
    :config
      (centaur-tabs-change-fonts "Cantarell" 160)
      ;; (centaur-tabs-headline-match)
      ;; (centaur-tabs-group-by-projectile-project)

  )
#+end_src

** Line Number
#+begin_src elisp
  (defun config/toggle-line-number-nil ()      
    (interactive)
    (setq display-line-numbers nil)
  )
  (defun config/toggle-line-number-absolute () 
    (interactive)
    (setq display-line-numbers t)
  )
  (defun config/toggle-line-number-relative () 
    (interactive)
    (setq display-line-numbers 'relative)
  )
  (defun config/toggle-line-number-visual ()   
    (interactive)
    (setq display-line-numbers 'visual)
  )
  (config/leader :infix "tl"
     ""        '(nil                                :wk "  Line Number ")
     "DEL"     '(which-key-undo                     :wk "󰕍 Undo key ")
     "n"       '(config/toggle-line-number-nil      :wk "󰅖 Nil        ")
     "a"       '(config/toggle-line-number-absolute :wk "󰯫 Absolute   ")
     "r"       '(config/toggle-line-number-relative :wk " Relative   ")
     "v"       '(config/toggle-line-number-visual   :wk " Visual     ")
  )
#+end_src

** Minibuffer
*** Vertico

[[https://github.com/minad/vertico#extensions][Vertico]] provides a performant and minimalistic vertical completion UI based on the default completion system. 

#+begin_src elisp
  (use-package vertico
    :init
    (setq completion-styles '(orderless))
    (setq orderless-component-separator #'orderless-escapable-split-on-space)
    (setq orderless-matching-styles
        '(orderless-initialism orderless-prefixes orderless-regexp))
    ;; Different scroll margin
    ;(setq vertico-scroll-margin 1)
    ;; Show more candidates
    ;(setq vertico-count 20)
    ;; Grow and shrink the Vertico minibuffer
    ;(setq vertico-resize nil)
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    ;; use Vertico as an in-buffer completion UI
    (setq completion-in-region-function 'consult-completion-in-region)
    (vertico-mode 1)
  )
#+end_src

**** Savehist

#+begin_src elisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
    (use-package savehist
        :init
        (savehist-mode))
#+end_src

#+begin_src elisp
  ;; A few more useful configurations...
    (use-package emacs
        :init
        ;; Add prompt indicator to `completing-read-multiple'.
        ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
        (defun crm-indicator (args)
        (cons (format "[CRM%s] %s"
                        (replace-regexp-in-string
                        "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                        crm-separator)
                        (car args))
                (cdr args)))
        (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

        ;; Do not allow the cursor in the minibuffer prompt
        (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
        (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

        ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
        ;; Vertico commands are hidden in normal buffers.
        ;; (setq read-extended-command-predicate
        ;;       #'command-completion-default-include-p)
        ;; Enable recursive minibuffers
        (setq enable-recursive-minibuffers t))
#+end_src

**** Vertico-directory

#+begin_src elisp
(use-package vertico-directory
  :after vertico
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src
**** Vertico-multiform

Vertico-multiform configures Vertico modes per command or completion category.

#+begin_src elisp
  (use-package vertico-multiform
    :after vertico
    :config (vertico-multiform-mode)
  )
#+end_src

*** Vertico-posframe

[[https://github.com/tumashu/vertico-posframe][Vertico-posframe]] is an vertico extension, which lets vertico use posframe to show its candidate menu.

#+begin_src elisp
  (use-package vertico-posframe
  :disabled
  :after vertico-multiform
  :init 
    (setq vertico-multiform-commands
         '((consult-line posframe
              (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
              ;(vertico-posframe-fallback-mode . vertico-buffer-mode)
              (vertico-posframe-width . 50))
           (execute-extended-command
              (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
              (vertico-posframe-fallback-mode . vertico-buffer-mode))
           (t posframe)
          )
    )
    ;(vertico-multiform-mode 1)
    ;(vertico-posframe-mode 1)
  )
#+end_src

*** Mini-frame

[[https://github.com/muffinmad/emacs-mini-frame][Mini-Frame]], similar to posframe, shows minibuffer in child frame on read-from-minibuffer.
#+begin_src elisp
  (use-package mini-frame
  :config
    (setq mini-frame-detach-on-hide nil)
    ;(setq mini-frame-standalone 't)
    ;(setq mini-frame-resize-min-height 10)
    (setq mini-frame-ignore-commands 
      (append mini-frame-ignore-commands
       '(evil-window-split evil-window-vsplit evil-ex)))
  )
#+end_src
*** Solaire mode

Darken the background of minibuffer using solaire-mode.
#+begin_src elisp
  ;(add-hook 'minibuffer-setup-hook 'solaire-mode)
#+end_src
*** Center text

Use olivetti to center text in minibuffer!
#+begin_src elisp
  (add-hook 'minibuffer-setup-hook
    (defun config/set-minibuffer-margin ()
      (setq olivetti-body-width 140)
      (olivetti-mode)
    )
  )
#+end_src

** Diff
#+begin_src elisp
  (use-package diff-hl
    :config
    (setq diff-hl-draw-borders nil)
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t)
  )
#+end_src

* LSP & Completion
** Consult

[[https://github.com/minad/consult][Consult]] provides search and navigation commands based on the Emacs completion function completing-read.

#+begin_src elisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+end_src

** YASnippet
[[https://github.com/joaotavora/yasnippet][YASnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
#+begin_src elisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
)
#+end_src

** LSP-bridge
[[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]] builds a high-speed cache between Emacs and the LSP server.
#+begin_src elisp
(use-package lsp-bridge
  :init
  (global-lsp-bridge-mode)
)
#+end_src

** Copilot
https://github.com/zerolfx/copilot.el
* Org
** User Interface
*** Fonts
Change the font size of different org-levels.

#+begin_src elisp
  (use-package org
    :hook (org-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'org-document-title nil :family "Cantarell" :height 2.5 :bold t)
    (set-face-attribute 'org-level-1 nil :family "Cantarell" :height 1.8 :bold t)
    (set-face-attribute 'org-level-2 nil :family "Cantarell" :height 1.6 :bold t)
    (set-face-attribute 'org-level-3 nil :family "Cantarell" :height 1.4 :bold t)
    (set-face-attribute 'org-level-4 nil :family "Cantarell" :height 1.3 )
    (set-face-attribute 'org-level-5 nil :family "Cantarell" :height 1.2 )
    (set-face-attribute 'org-level-6 nil :family "Cantarell" :height 1.1 )
  )
#+end_src

*** Headings & Levels
**** Level Bullets & lines

[[https://github.com/minad/org-modern][Org-modern]] implements a modern style for Org buffers using font locking and text properties. The package styles =headlines=, =keywords=, =tables= and =source blocks=. 
*This awesome package throws no warning during compilation. 

#+begin_src elisp
  (use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
     (setq org-modern-keyword
       (quote (("author" . "⛾")
               ("title" . "❖")
               ("subtitle" . "§")
               (t . t))))
     (setq org-modern-star
          ;'("◉" "○" "◈" "◇" "✳")
          '("⚀" "⚁" "⚂" "⚃" "⚄" "⚅")
          ;'("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")
     )
  )
#+end_src

[[https://github.com/integral-dw/org-superstar-mode][Org-superstar]] replaces the asterisk before every org-level with ascii symbols.
Disabled because org-morden is a drop-in replacement.

#+begin_src elisp
  (use-package org-superstar
  :defer t
  ;:hook (org-mode . org-superstar-mode)
  :init
    (setq
      ;;org-superstar-headline-bullets-list '("󰇊" "󰇋" "󰇌" "󰇍" "󰇎" "󰇏")
      org-superstar-special-todo-items t
      ;;org-ellipsis "  "
    )
  )
#+end_src

[[https://github.com/tonyaldon/org-bars][Org-bars-mode]] is a minor mode for org-mode.
It adds bars to the virtual indentation provided by the built-in package org-indent.
Have drawbacks when using mixed-pitch-mode.

#+begin_src elisp
  (use-package org-bars
  :defer t
  :commands 'org-bars-mode
  ;:hook (org-mode . org-bars-mode)
  :config
    (setq org-bars-color-options '(
          :desaturate-level-faces 100
          :darken-level-faces 10
    ))
    (setq org-bars-extra-pixels-height 25)
    (setq org-bars-stars '(:empty "" :invisible "" :visible ""))
  )
#+end_src

[[https://github.com/legalnonsense/org-visual-outline][Org-visual-outline]] does the same as Org-bars-mode. It is split into two independent packages:
- Org-dynamic-bullets :: handles the dynamic bullets. =Brokes highlight=.
- Org-visual-indent  :: adds vertical lines to org-indent. =Does better than Org-bars-mode=

#+begin_src elisp
  (use-package org-visual-outline
  :hook (org-mode . org-visual-indent-mode)
  )
#+end_src

*** Text arrangement

Use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.
Use visual-line-mode to wrap text.
Use org-indent-mode to set different indenting for different levels.

#+begin_src elisp :tangle no
    (add-hook 'org-mode-hook
      (defun config/org-mode-text-arrangement ()
        (config/window-center 100)
        (org-indent-mode)
  ;      (variable-pitch-mode 1)
      )
    )
#+end_src

*** Highlight TODO
#+begin_src elisp
  (use-package hl-todo
    :init
    (hl-todo-mode)
  )
#+end_src

*** Fancy-priorities
#+begin_src elisp
  (use-package org-fancy-priorities)
#+end_src

*** Org-appear
[[https://github.com/awth13/org-appearAutomatically][Org-appear]] disaply emphasis markers and links when the cursor is on them.
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-appear-autoemphasis  t)
    ;(setq org-appear-autolinks t)
    (setq org-appear-autosubmarkers t)
    (setq org-appear-inside-latex t)
    (setq org-hide-emphasis-markers t)
  )
#+end_src

** Kbd-configs
*** Evil-org
#+begin_src elisp
  (use-package evil-org)
#+end_src

** Code-block
#+begin_src elisp
  (use-package org
  :config
      (setq org-src-tab-acts-natively t)
      (setq org-src-preserve-indentation nil)
  )
#+end_src

** Table-block
[[https://github.com/casouri/valign][Valign]] provides visual alignment for Org Mode, Markdown and table.el tables on GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters and images. Meanwhile, the text-based alignment generated by Org mode (or Markdown mode) is left untouched.
#+begin_src elisp
  (use-package valign
  :hook (org-mode . valign-mode)
  )
#+end_src
[[https://github.com/tbanel/orgaggregate][Orgtbl-aggregate]] can creat a new table by computing sums, averages, and so on, out of material from the first table.

** Roam
#+begin_src elisp
  (use-package org-roam
  :after org
  :init
    (setq org-roam-directory (file-truename "~/roam"))
    (setq org-roam-v2-ack t)
  )
#+end_src

** GTD
** Pandoc
#+begin_src elisp
;; (use-package org-pandoc)
#+end_src

** Packages
    
* Code
** elisp
- buttercup
- elisp-def
- elisp-demos
- [[highlight-quoted]]
- macrostep
- overseer
* Utilities
** Dirvish
Dropin replacement for dired.
#+begin_src elisp
  (use-package dirvish
  :init
    (dirvish-override-dired-mode)
  :custom
    (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
      '(("h" "~/"                          "Home")
        ("d" "~/Downloads/"                "Downloads")
        ("m" "/mnt/"                       "Drives")
        ("t" "~/.local/share/Trash/files/" "TrashCan"))
    )
  :config
    ;; (dirvish-peek-mode) ; Preview files in minibuffer
    ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
    (setq dirvish-path-separators (list "  " "  " "  "))
    (setq dirvish-mode-line-format
            '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-attributes
            '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches
            "-l --almost-all --human-readable --group-directories-first --no-group")
    (nmap dirvish-mode-map
        "TAB"    '(dirvish-subtree-toggle    :wk "Subtre-toggle")
        "q"      '(dirvish-quit              :wk "Quit")
        "h"      '(dired-up-directory        :wk "Up-dir")
        "l"      '(dired-find-file           :wk "Open/Toggle")
        "a"      '(dirvish-quick-access      :wk "Access")
        "f"      '(dirvish-file-info-menu    :wk "File Info Menu")
        "y"      '(dirvish-yank-menu         :wk "Yank Menu")
        "N"      '(dirvish-narrow            :wk "Narrow")
        "v"      '(dirvish-vc-menu           :wk "View-file") ; remapped `dired-view-file'
        "s"      '(dirvish-quicksort         :wk "Quick-sort"); remapped `dired-sort-toggle-or-edit'

        "M-f"    '(dirvish-history-go-forward  :wk "History-forward")
        "M-b"    '(dirvish-history-go-backward :wk "History-back")
        "M-l"    '(dirvish-ls-switches-menu    :wk "ls Switch Menu")
        "M-m"    '(dirvish-mark-menu           :wk "Mark Menu")
        "M-t"    '(dirvish-layout-toggle       :wk "Layout-toggle")
        "M-s"    '(dirvish-setup-menu          :wk "Setup-Menu")
        "M-e"    '(dirvish-emerge-menu         :wk "Emerge-Menu")
        "M-j"    '(dirvish-fd-jump             :wk "fd-jump")
    )
  )
  ;      :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  ;      (("C-c f" . dirvish-fd)
  ;       :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
  ;       ("a"   . dirvish-quick-access)
  ;       ("f"   . dirvish-file-info-menu)
  ;       ("y"   . dirvish-yank-menu)
  ;       ("N"   . dirvish-narrow)
  ;       ("^"   . dirvish-history-last)
  ;       ("h"   . dirvish-history-jump) ; remapped `describe-mode'
  ;       ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
  ;       ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
  ;       ("TAB" . dirvish-subtree-toggle)
  ;       ("M-f" . dirvish-history-go-forward)
  ;       ("M-b" . dirvish-history-go-backward)
  ;       ("M-l" . dirvish-ls-switches-menu)
  ;       ("M-m" . dirvish-mark-menu)
  ;       ("M-t" . dirvish-layout-toggle)
  ;       ("M-s" . dirvish-setup-menu)
  ;       ("M-e" . dirvish-emerge-menu)
  ;       ("M-j" . dirvish-fd-jump))
#+end_src
#+begin_src elisp
  (use-package diredfl
    :hook
    ((dired-mode . diredfl-mode)
     ;; highlight parent and directory preview as well
     (dirvish-directory-view-mode . diredfl-mode))
    :config
    (set-face-attribute 'diredfl-dir-name nil :bold t)
  )
#+end_src
** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful information to Emacs' =describe-= command buffers.
For example, if you use =describe-function=, you will not only get the documentation about the function,
you will also see the source code of the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.

#+begin_src elisp
  (use-package helpful
  :bind
     ([remap describe-key]      . helpful-key)
     ([remap describe-command]  . helpful-command)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-function] . helpful-callable)
  )
#+end_src

** Marginalia
#+begin_src elisp
  (use-package marginalia
  :general
    (:keymaps 'minibuffer-local-map
     "M-A" 'marginalia-cycle)
  :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
  :init
    (marginalia-mode)
  )
#+end_src

* Libraries
** S
[[https://github.com/magnars/s.el][S]] is the long lost Emacs string manipulation library.

** F
[[https://github.com/rejeep/f.el][F]] is a modern API for working with files and directories in Emacs.

** Annalist
[[https://github.com/noctuid/annalist.el][annalist.el]] is a library that can be used to record information and later print that information using org-mode headings and tables. It allows defining different types of things that can be recorded (e.g. keybindings, settings, hooks, and advice) and supports custom filtering, sorting, and formatting. annalist is primarily intended for use in other packages like general and evil-collection, but it can also be used directly in a user’s configuration.
** Shrink path
[[https://github.com/zbelial/shrink-path.el][Shrink path]] is a small utility functions that allow for fish-style trunctated directories in eshell and for example modeline.
#+begin_src elisp
(use-package shrink-path :demand t)
#+end_src

* Games
** Tetris
#+begin_src elisp
  (add-hook 'tetris-mode-hook
    (defun config/tetris-center ()
      (config/window-center 76)
    )
  )
#+end_src

** 2048
#+begin_src elisp
  (add-hook '2048-mode-hook
    (defun config/2048-center ()
      (config/window-center 35)
    )
  )
#+end_src

* Eaf

[[https://github.com/emacs-eaf/emacs-application-framework][EAF]] is an extensible framework that revolutionizes the graphical capabilities of Emacs.
#+begin_src elisp 
  (use-package eaf
  :custom
    ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
  :config
    (defalias 'browse-web #'eaf-open-browser)
    ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)
    (setq confirm-kill-processes nil)
  ) ;; unbind, see more in the Wiki

  (use-package eaf-browser)
  (use-package eaf-pdf-viewer)
#+end_src

* TODOs
- pixel-scroll-precision-mode for evil scroll
- vertico-buffer & minibuffer
- Org mode 
    + Roam
    + GTD
- Posframe for magit and others
