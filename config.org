:DOC-CONFIG:
# Tangle by default to init.el, which is the most common case
#+PROPERTY: header-args:elisp :tangle init.el :language elisp
#+PROPERTY: header-args:emacs-lisp :tangle init.el :language elisp
#+PROPERTY: header-args:mkdirp yes :comments no
#+STARTUP: fold
#+OPTIONS: toc:2
:END:

#+TITLE: The Emacs Configuration Org File
#+AUTHOR: A7R7
[[https://img.shields.io/github/repo-size/A7R7/EmaxBound][https://img.shields.io/github/repo-size/A7R7/EmaxBound.svg?style=svg]

All the necessary Emacs config files (early-init.el, init.el) are generated from this org file,
by using [[elisp:org-babel-tangle][M-x org-babel-tangle (C-c C-v t)]] in Emacs org-mode.

* Introduction
** How to deploy this config
To play around with my config files, clone this repo anywhere you like on your system.
#+begin_src bash
git clone --depth=1 https://github.com/A7R7/EmaxBound.git
#+end_src

Then, simply execute these make rules inside the repo directory.
#+begin_src bash
make bootstrap-borg  # bootstrap borg itself
make bootstrap       # bootstrap collective or new drones
#+end_src

If you're using emacs29 or above, run ~emacs --init-directory=<path-of-the-repo>~ (remember to replace the path).

Else, you can have a look at [[https://github.com/plexus/chemacs2][chemacs2]], which makes it easy to run multiple Emacs configurations side by side.

** How I built this config
The whole config structure is built upon [[https://github.com/emacscollective/emacs.g][emacscollective/emacs.g]]. It is a starter-kit using borg as the package manager, which utilizes git submodules to maintain all its packages.
Check [[https://emacsmirror.net/manual/borg/Bootstrapping-using-a-seed.html][Bootstrapping-using-a-seed]] from its [[https://emacsmirror.net/manual/borg/][manual]] to see how to build the config structure.

- Firstly, I generated the structure from the seed.
- Then, I copied and pasted all the original code from init.el and early-init.el to this org file.
- Last, any further config does not go beyond the following 2 steps:
+ Run [[elisp: borg-assimilate][M-x borg-assimilate]] and input the name of the package to install this package.
+ Write config codes into this org file, then run [[elisp:org-babel-tangle][M-x org-babel-tangle]] so that emacs writes the codes into the corresponding file.

** References
-  [[https://gitlab.com/dwt1/configuring-emacs][DistroTube's Configuring Emacs]] (2023)
-  [[https://github.com/seagle0128/.emacs.d][seagle0128's Centaur Emacs]] (2023)
-  [[https://github.com/daviwil/emacs-from-scratch][Daviwell's Emacs from scratch]] (2021)
-  [[https://github.com/lccambiaghi/vanilla-emacs][Luca's vanilla-emacs]] (2023)
*NOTE*: the year number after each line equals to
- =min (last time the config get's updated, last time I refered to the config)=

* Early Init
File header, disable byte-compile
#+begin_src elisp :tangle early-init.el
;;; early-init.el --- early bird      -*- no-byte-compile: t -*-
;;; early-init.el --- earliest birds  -*- lexical-binding: t -*-
#+end_src

Disable tool-bar, menu-bar and scroll-bar before they're loaded.
#+begin_src elisp :tangle early-init.el
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

Borg seed generated configs.
#+begin_src elisp :tangle early-init.el
(setq load-prefer-newer t)

(let ((dir (file-name-directory (or load-file-name buffer-file-name))))
  (add-to-list 'load-path (expand-file-name "lib/compat" dir))
  (add-to-list 'load-path (expand-file-name "lib/packed" dir))
  (add-to-list 'load-path (expand-file-name "lib/auto-compile" dir)))
(require 'auto-compile)
(auto-compile-on-load-mode)
(auto-compile-on-save-mode)

(setq package-enable-at-startup nil)

(with-eval-after-load 'package
  (add-to-list 'package-archives (cons "melpa" "https://melpa.org/packages/") t))
;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; End:
;;; early-init.el ends here
#+end_src

* Init
** Header
Init.el file header, disable byte compile for init.el, according to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][emacs manual]].
#+begin_src elisp
;;; init.el --- user-init-file
;;; -*- no-byte-compile: t -*-
;;; -*- lexical-binding: t -*-
#+end_src
** Loading message
#+begin_src elisp
;;; Early birds
(progn ;     startup
  (defvar before-user-init-time (current-time)
    "Value of `current-time' when Emacs begins loading `user-init-file'.")
  (message "Loading Emacs...done (%.3fs)"
           (float-time (time-subtract before-user-init-time
                                      before-init-time)))
  (setq user-init-file (or load-file-name buffer-file-name))
  (setq user-emacs-directory (file-name-directory user-init-file))
  (message "Loading %s..." user-init-file)

  (setq inhibit-startup-buffer-menu t)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message "locutus")
  (setq initial-buffer-choice t)
  (setq initial-scratch-message "")
)
#+end_src

** Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src elisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src

** Borg
Define a function to assimilate multiple packages at a time
#+begin_src elisp
(eval-and-compile ; `borg'
  (add-to-list 'load-path (expand-file-name "lib/borg" user-emacs-directory))
  (require 'borg)
  (borg-initialize)
  (defun borg-assimilate-loop ()
    (interactive)
    (catch 'loop-end
      (while t ; Infinite loop until explicitly terminated
        (condition-case nil
          (borg-assimilate ()) ; Call your function here
          (quit (throw 'loop-end nil)))))
  ) ; Catch 'C-g' (quit) signal and end the loop
)

#+end_src

** Use-package
#+begin_src elisp
(eval-and-compile ; `use-package'
  (require  'use-package)
  (setq use-package-verbose t))
#+end_src
** dash
#+begin_src elisp
(use-package dash
  :config (global-dash-fontify-mode))
#+end_src
** eieio
#+begin_src elisp
(use-package eieio)
#+end_src
** auto-compile
#+begin_src elisp
(use-package auto-compile
  :config
  (setq auto-compile-display-buffer               nil)
  (setq auto-compile-mode-line-counter            t)
  (setq auto-compile-source-recreate-deletes-dest t)
  (setq auto-compile-toggle-deletes-nonlib-dest   t)
  (setq auto-compile-update-autoloads             t)
)
#+end_src
** epkg
#+begin_src elisp
(use-package epkg
  :defer t
  :init
  (setq epkg-repository
        (expand-file-name "var/epkgs/" user-emacs-directory))
  (setq epkg-database-connector
        (if (>= emacs-major-version 29) 'sqlite-builtin 'sqlite-module)))
#+end_src
** custom
#+begin_src elisp
(use-package custom
  :no-require t
  :config
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src
** server
#+begin_src elisp
(use-package server
  :commands (server-running-p)
  :config (or (server-running-p) (server-mode)))
#+end_src
** elisp
#+begin_src elisp
(progn ;     startup
  (message "Loading early birds...done (%.3fs)"
           (float-time (time-subtract (current-time) before-user-init-time))))
#+end_src
** long tail
#+begin_src elisp
(use-package diff-hl
  :config
  (setq diff-hl-draw-borders nil)
  (global-diff-hl-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh t))
#+end_src

#+begin_src elisp
(use-package diff-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'diff-refine-changed nil :extend t)
    (set-face-attribute 'diff-refine-removed nil :extend t)
    (set-face-attribute 'diff-refine-added   nil :extend t)))
#+end_src

#+begin_src elisp
(use-package dired
  :defer t
  :config (setq dired-listing-switches "-alh"))
#+end_src

#+begin_src elisp
(use-package eldoc
  :when (version< "25" emacs-version)
  :config (global-eldoc-mode))
#+end_src

#+begin_src elisp
(use-package help
  :defer t
  :config (temp-buffer-resize-mode))
#+end_src

#+begin_src elisp
(progn ;    `isearch'
  (setq isearch-allow-scroll t))
#+end_src

#+begin_src elisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'reveal-mode)
  (defun indent-spaces-mode ()
    (setq indent-tabs-mode nil))
  (add-hook 'lisp-interaction-mode-hook 'indent-spaces-mode))
#+end_src

#+begin_src elisp
(use-package magit
  :defer t
  :commands (magit-add-section-hook)
  :config
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-modules
                          'magit-insert-stashes
                          'append))
#+end_src

#+begin_src elisp
(use-package man
  :defer t
  :config (setq Man-width 80))
#+end_src

#+begin_src elisp
(use-package paren
  :config (show-paren-mode))
#+end_src

#+begin_src elisp
(use-package prog-mode
  :config (global-prettify-symbols-mode)
  (defun indicate-buffer-boundaries-left ()
    (setq indicate-buffer-boundaries 'left))
  (add-hook 'prog-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package recentf
  :demand t
  :config (add-to-list 'recentf-exclude "^/\\(?:ssh\\|su\\|sudo\\)?x?:"))
#+end_src

#+begin_src elisp
(use-package savehist
  :config (savehist-mode))
#+end_src

#+begin_src elisp
(use-package saveplace
  :when (version< "25" emacs-version)
  :config (save-place-mode))
#+end_src

#+begin_src elisp
(use-package simple
  :config (column-number-mode))
#+end_src

#+begin_src elisp
(use-package smerge-mode
  :defer t
  :config
  (when (>= emacs-major-version 27)
    (set-face-attribute 'smerge-refined-removed nil :extend t)
    (set-face-attribute 'smerge-refined-added   nil :extend t)))
#+end_src

#+begin_src elisp
(progn ;    `text-mode'
  (add-hook 'text-mode-hook 'indicate-buffer-boundaries-left))
#+end_src

#+begin_src elisp
(use-package tramp
  :defer t
  :config
  (add-to-list 'tramp-default-proxies-alist '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist '("localhost" nil nil))
  (add-to-list 'tramp-default-proxies-alist
               (list (regexp-quote (system-name)) nil nil))
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp)))
#+end_src

#+begin_src elisp
(use-package tramp-sh
  :defer t
  :config (cl-pushnew 'tramp-own-remote-path tramp-remote-path))
#+end_src

** Tequila worms
#+begin_src elisp
(progn ;     startup
  (message "Loading %s...done (%.3fs)" user-init-file
           (float-time (time-subtract (current-time)
                                      before-user-init-time)))
  (add-hook 'after-init-hook
            (lambda ()
              (message
               "Loading %s...done (%.3fs) [after-init]" user-init-file
               (float-time (time-subtract (current-time)
                                          before-user-init-time))))
            t))

(progn ;     personalize
  (let ((file (expand-file-name (concat (user-real-login-name) ".el")
                                user-emacs-directory)))
    (when (file-exists-p file)
      (load file))))

;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; init.el ends here
#+end_src

* UI Configs
** Basics
** Fonts

Defining the various fonts that Emacs will use.
#+begin_src elisp
  (set-face-attribute 'default nil
    :font "JetBrainsMono Nerd Font"
    :height 150
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu Nerd Font"
    :height 160
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono Nerd Font"
    :height 150
    :weight 'medium)



#+end_src

Makes commented text and keywords italics. Working in emacsclient but not emacs.
#+begin_src elisp
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
#+end_src

Uncomment the following line if line spacing needs adjusting.
#+begin_src elisp
(setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Icons
*** All-the-icons
[[https://github.com/domtronn/all-the-icons.el][All-the-icons]] is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

*NOTE*: In order for the icons to work it is very important that you install the Resource Fonts included in this package. Run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

*** Nerd-icons
[[https://github.com/rainstormstudio/nerd-icons.el][Nerd-icons]] is a library for easily using Nerd Font icons inside Emacs, an alternative to all-the-icons.
Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install =Symbols Nerd Fonts Mono= for you.
#+begin_src elisp
(use-package nerd-icons
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
)
#+end_src

** Theme
[[https://github.com/hlissner/emacs-doom-themes][Doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes. Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.
#+begin_src elisp
(use-package doom-themes
  :init
  (load-theme 'doom-ayu-mirage t))
#+end_src

** Transparency
Set background alpha to 5%
#+begin_src elisp
(set-frame-parameter nil 'alpha-background 95)
(add-to-list 'default-frame-alist '(alpha-background . 95))
#+end_src
** Doom Modeline
[[https://github.com/seagle0128/doom-modeline][Doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src elisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

*NOTE1*: [[Nerd-icons]] are necessary. Run [[elisp:nerd-icons-install-fonts][M-x nerd-icons-install-fonts]] to install the resource fonts.

*NOTE2:* [[All-the-icons]] hasn't been supported since 4.0.0. If you prefer all-the-icons, please use release 3.4.0, then run [[elisp:all-the-icons-install-fonts][M-x all-the-icons-install-fonts]] to install necessary icons.

** Helpful Help cmds

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src elisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Dashboard
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.
#+begin_src emacs-lisp
(use-package dashboard
:init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;; (setq dashboard-banner-logo-title "Also try NeoVim!")
  ;; show Dashboard in frames created with emacsclient -c
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content

  (setq dashboard-items '(
        (recents . 5)
        (agenda . 5 )
        (bookmarks . 3)
        (projects . 3)
        (registers . 3)
  ))

  ;; (dashboard-modify-heading-icons '((recents . "file-text") (bookmarks . "book")))
:config
  (dashboard-setup-startup-hook)
)
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)

#+end_src

** Tabs
#+begin_src elisp
  (use-package centaur-tabs
    :hook
      (emacs-startup . centaur-tabs-mode)
    :init
      (setq centaur-tabs-set-icons t
	    centaur-tabs-set-modified-marker t
	    centaur-tabs-modified-marker "M"
	    centaur-tabs-cycle-scope 'tabs
	    centaur-tabs-set-close-button nil
	    centaur-tabs-enable-ido-completion nil)
    :config
      (centaur-tabs-mode t)
      ;; (centaur-tabs-headline-match)
      (centaur-tabs-group-by-projectile-project)
  )
#+end_src
** Shrink path
[[https://github.com/zbelial/shrink-path.el][Shrink path]] is a small utility functions that allow for fish-style trunctated directories in eshell and for example modeline.
#+begin_src elisp
(use-package shrink-path :demand t)
#+end_src

** S
[[https://github.com/magnars/s.el][S]] is the long lost Emacs string manipulation library.

** F
[[https://github.com/rejeep/f.el][F]] is a modern API for working with files and directories in Emacs.

** Annalist
[[https://github.com/noctuid/annalist.el][annalist.el]] is a library that can be used to record information and later print that information using org-mode headings and tables. It allows defining different types of things that can be recorded (e.g. keybindings, settings, hooks, and advice) and supports custom filtering, sorting, and formatting. annalist is primarily intended for use in other packages like general and evil-collection, but it can also be used directly in a user’s configuration.
* Kbd Configs
** Evil
#+begin_src elisp
(use-package evil
  :init
    (setq evil-want-integration t) ;; t by default
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
  :config
    (evil-mode 1)
      ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
)
#+end_src

[[https://github.com/emacs-evil/evil-collection][evil-collection]] automatically configures various Emacs modes with Vi-like keybindings.

#+begin_src elisp
(use-package evil-collection
  ;; :demand t
  :after evil
  :config
  ;(setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

(use-package evil-tutor
  :demand t)

(use-package emacs
  :config (setq ring-bell-function #'ignore)
)
#+end_src
** General
[[https://github.com/noctuid/general.el][General]] provides a more convenient method for binding keys in emacs
(for both evil and non-evil users).

*Note*: byte compile init.el will lead to function created by general-create-definer failed to work. See [[Header]].
#+begin_src elisp
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package general
:after evil
:config
  ;; (general-evil-setup)
  ;; set up 'SPC' as the global leader key
  (general-create-definer bind-leader-to
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode
  (bind-leader-to
      "b"  '(:ignore t                          :wk "Buffer")
      "bb" '(switch-to-buffer                   :wk "Switch buffer")
      "bd" '(kill-this-buffer                   :wk "Delete buffer")
      "bn" '(next-buffer                        :wk "Next buffer")
      "bp" '(previous-buffer                    :wk "Prev buffer")
      "br" '(revert-buffer                      :wk "Reload buffer")
      "]"  '(next-buffer                        :wk "Next buffer")
      "["  '(previous-buffer                    :wk "Prev buffer")

      "w"  '(:ignore t                          :wk "Window")
      "wd" '(delete-window                      :wk "Delete window")
      "wv" '(split-window-vertically            :wk "Vertical split")
      "wh" '(split-window-horizontally          :wk "Horizontal split")
      "wh" '(evil-window-left                   :wk "window <")
      "wj" '(evil-window-down                   :wk "window v")
      "wk" '(evil-window-up                     :wk "window ^")
      "wl" '(evil-window-right                  :wk "window >")
  )
)
#+end_src

** Which-key
[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+begin_src elisp
(use-package which-key
  :init
  (which-key-mode 1)
  :config
  (setq
    which-key-side-window-location 'bottom
    which-key-sort-order #'which-key-key-order-alpha
    which-key-sort-uppercase-first nil
    which-key-add-column-padding 1
    which-key-max-display-columns nil
    which-key-min-display-lines 6
    which-key-side-window-slot -10
    which-key-side-window-max-height 0.25
    which-key-idle-delay 0.8
    which-key-idle-secondary-delay 0.03
    which-key-max-description-length 25
    which-key-allow-imprecise-window-fit t
    which-key-separator " → "
  )
)
#+end_src

* Org mode
** Evil
#+begin_src elisp
(use-package evil-org)
#+end_src
** Roam
#+begin_src elisp
(use-package org-roam
:after org
:init
  (setq org-roam-directory (file-truename "~/roam"))
  (setq org-roam-v2-ack t)
)
#+end_src
** GTD
** Org UI
*** superstar
#+begin_src elisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :init
    ;; (setq org-superstar-headline-bullets-list '("✖" "✚" "◉" "○" "▶")
	  ;; org-superstar-special-todo-items t
	  ;; org-ellipsis " ↴ ")
  )
#+end_src
*** fancy-priorities
#+begin_src elisp
(use-package org-fancy-priorities)
#+end_src

** Pandoc
#+begin_src elisp
;; (use-package org-pandoc)
#+end_src
* Utilities
#+begin_src elisp
(use-package dirvish
    :init (dirvish-override-dired-mode)
)
#+end_src
* EAF
[[https://github.com/emacs-eaf/emacs-application-framework][EAF]] is an extensible framework that revolutionizes the graphical capabilities of Emacs.
#+begin_src elisp
(use-package eaf
;; :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
:custom
  ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)
:config
  (defalias 'browse-web #'eaf-open-browser)
  ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)
) ;; unbind, see more in the Wiki
#+end_src

#+begin_src elisp
;; (use-package eaf-browser)       ;;M-x eaf-file-browser-qrcode
(use-package eaf-git)       ;;M-x eaf-file-browser-qrcode
;; (use-package eaf-file-manager)  ;;M-x eaf-open-in-file-manager
(use-package eaf-pdf-viewer)
#+end_src
